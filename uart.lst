   1               		.file	"uart.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__CCP__ = 0x34
   7               	__tmp_reg__ = 0
   8               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  11               		.cfi_sections	.debug_frame
  12               	.global	UartTxBufferReady
  14               	UartTxBufferReady:
  15               	.LFB2:
  16               		.file 1 "uart.c"
   1:uart.c        **** //-----------------------------------------------------------------------
   2:uart.c        **** //-----------------------------------------------------------------------
   3:uart.c        **** // UART functions.
   4:uart.c        **** //-----------------------------------------------------------------------
   5:uart.c        **** //-----------------------------------------------------------------------
   6:uart.c        **** // For XMEGA MCUs.
   7:uart.c        **** // NOTE -- we are associated with one uart here only, this is not great use of the xmega register-a
   8:uart.c        **** // Mon Oct 31 16:06:56 EDT 2011
   9:uart.c        **** 
  10:uart.c        **** #include "includes.h"
  11:uart.c        **** 
  12:uart.c        **** #define		USART		USARTF0
  13:uart.c        **** 
  14:uart.c        **** bool UartTxBufferReady(void)
  15:uart.c        **** {
  17               		.loc 1 15 0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  16:uart.c        **** 	if(USART.STATUS&USART_DREIF_bm)		// Room in the transmit buffer? (bit is 1 when there's room)
  23               		.loc 1 16 0
  24 0000 8091 A10B 		lds r24,2977
  17:uart.c        **** 	{
  18:uart.c        **** 		return(true);
  19:uart.c        **** 	}
  20:uart.c        **** 	return(false);
  21:uart.c        **** }
  25               		.loc 1 21 0
  26 0004 85FB      		bst r24,5
  27 0006 8827      		clr r24
  28 0008 80F9      		bld r24,0
  29 000a 0895      		ret
  30               		.cfi_endproc
  31               	.LFE2:
  33               	.global	UartSendByte
  35               	UartSendByte:
  36               	.LFB3:
  22:uart.c        **** 
  23:uart.c        **** void UartSendByte(unsigned char byte)
  24:uart.c        **** // Waits (forever if necessary) until the the send buffer is ready, then sends a byte out over the 
  25:uart.c        **** // NOTE -- this doesn't check whether the output shift register is still clocking out data (ie, whe
  26:uart.c        **** {
  37               		.loc 1 26 0
  38               		.cfi_startproc
  39               	/* prologue: function */
  40               	/* frame size = 0 */
  41               	/* stack size = 0 */
  42               	.L__stack_usage = 0
  43               	.LVL0:
  44               	.L3:
  27:uart.c        **** 	while(!(USART.STATUS&USART_DREIF_bm))		// Hang here until there is room in the transmit buffer (bi
  45               		.loc 1 27 0 discriminator 1
  46 000c 9091 A10B 		lds r25,2977
  47 0010 95FF      		sbrs r25,5
  48 0012 00C0      		rjmp .L3
  28:uart.c        **** 		;
  29:uart.c        **** 	USART.DATA=byte;							// Load the TX buffer.  The byte will clock out automagically.
  49               		.loc 1 29 0
  50 0014 8093 A00B 		sts 2976,r24
  51 0018 0895      		ret
  52               		.cfi_endproc
  53               	.LFE3:
  55               	.global	UartGetByte
  57               	UartGetByte:
  58               	.LFB4:
  30:uart.c        **** }
  31:uart.c        **** 
  32:uart.c        **** unsigned char UartGetByte()
  33:uart.c        **** // Gets the first byte in the UART's receive buffer.
  34:uart.c        **** {
  59               		.loc 1 34 0
  60               		.cfi_startproc
  61               	/* prologue: function */
  62               	/* frame size = 0 */
  63               	/* stack size = 0 */
  64               	.L__stack_usage = 0
  35:uart.c        **** 	return(USART.DATA);		// Get one byte back from the receive buffer.  Note that there may be (one) m
  65               		.loc 1 35 0
  66 001a 8091 A00B 		lds r24,2976
  36:uart.c        **** }
  67               		.loc 1 36 0
  68 001e 0895      		ret
  69               		.cfi_endproc
  70               	.LFE4:
  72               	.global	UartGotByte
  74               	UartGotByte:
  75               	.LFB5:
  37:uart.c        **** 
  38:uart.c        **** bool UartGotByte()
  39:uart.c        **** // Returns true when there is unread data in the UART's receive buffer.
  40:uart.c        **** {
  76               		.loc 1 40 0
  77               		.cfi_startproc
  78               	/* prologue: function */
  79               	/* frame size = 0 */
  80               	/* stack size = 0 */
  81               	.L__stack_usage = 0
  41:uart.c        **** 	if(USART.STATUS&USART_RXCIF_bm)		// Flag is set when there are unread data in the buffer
  82               		.loc 1 41 0
  83 0020 8091 A10B 		lds r24,2977
  42:uart.c        **** 	{
  43:uart.c        **** 		return(true);
  44:uart.c        **** 	}
  45:uart.c        **** 	return(false);
  46:uart.c        **** }
  84               		.loc 1 46 0
  85 0024 881F      		rol r24
  86 0026 8827      		clr r24
  87 0028 881F      		rol r24
  88 002a 0895      		ret
  89               		.cfi_endproc
  90               	.LFE5:
  92               	.global	UartWaitForByte
  94               	UartWaitForByte:
  95               	.LFB6:
  47:uart.c        **** 
  48:uart.c        **** void UartWaitForByte()
  49:uart.c        **** // Hang out here (maybe forever) until we get a byte.
  50:uart.c        **** {
  96               		.loc 1 50 0
  97               		.cfi_startproc
  98               	/* prologue: function */
  99               	/* frame size = 0 */
 100               	/* stack size = 0 */
 101               	.L__stack_usage = 0
 102               	.L10:
  51:uart.c        **** 	while(!UartGotByte())				// If there's not new data in the buffer, wait here until there is.
 103               		.loc 1 51 0 discriminator 1
 104 002c 0E94 0000 		call UartGotByte
 105               	.LVL1:
 106 0030 8823      		tst r24
 107 0032 01F0      		breq .L10
 108               	/* epilogue start */
  52:uart.c        **** 		;
  53:uart.c        **** }
 109               		.loc 1 53 0
 110 0034 0895      		ret
 111               		.cfi_endproc
 112               	.LFE6:
 114               	.global	UartFlushBuffer
 116               	UartFlushBuffer:
 117               	.LFB7:
  54:uart.c        **** 
  55:uart.c        **** void UartFlushBuffer()
  56:uart.c        **** // Empties the serial buffer.
  57:uart.c        **** {
 118               		.loc 1 57 0
 119               		.cfi_startproc
 120               	/* prologue: function */
 121               	/* frame size = 0 */
 122               	/* stack size = 0 */
 123               	.L__stack_usage = 0
 124               	.L14:
  58:uart.c        **** 	while(UartGotByte())
 125               		.loc 1 58 0
 126 0036 0E94 0000 		call UartGotByte
 127               	.LVL2:
 128 003a 8823      		tst r24
 129 003c 01F0      		breq .L16
 130               	.LBB4:
 131               	.LBB5:
  35:uart.c        **** }
 132               		.loc 1 35 0
 133 003e 8091 A00B 		lds r24,2976
 134 0042 00C0      		rjmp .L14
 135               	.L16:
 136               	/* epilogue start */
 137               	.LBE5:
 138               	.LBE4:
  59:uart.c        **** 	{
  60:uart.c        **** 		UartGetByte();
  61:uart.c        **** 	}
  62:uart.c        **** }
 139               		.loc 1 62 0
 140 0044 0895      		ret
 141               		.cfi_endproc
 142               	.LFE7:
 144               	.global	UnInitUart
 146               	UnInitUart:
 147               	.LFB8:
  63:uart.c        **** 
  64:uart.c        **** void UnInitUart()
  65:uart.c        **** // Undo what InitUart did.
  66:uart.c        **** {
 148               		.loc 1 66 0
 149               		.cfi_startproc
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 0 */
 153               	.L__stack_usage = 0
  67:uart.c        **** 	USART.CTRLB=0;		// Disable transmitter and receiver
 154               		.loc 1 67 0
 155 0046 1092 A40B 		sts 2980,__zero_reg__
 156 004a 0895      		ret
 157               		.cfi_endproc
 158               	.LFE8:
 160               	.global	InitUart
 162               	InitUart:
 163               	.LFB9:
  68:uart.c        **** }
  69:uart.c        **** 
  70:uart.c        **** void InitUart()
  71:uart.c        **** // This UART setup is for 38400 baud, 8 data bits, one stop bit, no parity, no flow control.
  72:uart.c        **** // Interrupts are disabled.
  73:uart.c        **** {
 164               		.loc 1 73 0
 165               		.cfi_startproc
 166               	/* prologue: function */
 167               	/* frame size = 0 */
 168               	/* stack size = 0 */
 169               	.L__stack_usage = 0
  74:uart.c        **** 	// Port specific stuff:
  75:uart.c        **** 
  76:uart.c        **** 	PR.PRPF&=~PR_USART0_bm;	// USART0 power on for this port
 170               		.loc 1 76 0
 171 004c E0E7      		ldi r30,lo8(112)
 172 004e F0E0      		ldi r31,0
 173 0050 8681      		ldd r24,Z+6
 174 0052 8F7E      		andi r24,lo8(-17)
 175 0054 8683      		std Z+6,r24
  77:uart.c        **** 
  78:uart.c        **** 	PORTF.OUTSET=PIN3_bm;
 176               		.loc 1 78 0
 177 0056 E0EA      		ldi r30,lo8(-96)
 178 0058 F6E0      		ldi r31,lo8(6)
 179 005a 88E0      		ldi r24,lo8(8)
 180 005c 8583      		std Z+5,r24
  79:uart.c        **** 	PORTF.DIRSET=PIN3_bm;	// PF3 (TXD0) as output driving high
 181               		.loc 1 79 0
 182 005e 8183      		std Z+1,r24
  80:uart.c        **** 
  81:uart.c        **** 	PORTF.DIRCLR=PIN2_bm;	// PF2 (RXD0) as input
 183               		.loc 1 81 0
 184 0060 84E0      		ldi r24,lo8(4)
 185 0062 8283      		std Z+2,r24
  82:uart.c        **** 	USART.CTRLB=0;			// Tx / Rx off for now, normal rate
 186               		.loc 1 82 0
 187 0064 E0EA      		ldi r30,lo8(-96)
 188 0066 FBE0      		ldi r31,lo8(11)
 189 0068 1482      		std Z+4,__zero_reg__
  83:uart.c        **** 
  84:uart.c        **** 	// Baud:
  85:uart.c        **** 	#if F_CPU==16000000UL 
  86:uart.c        **** 	// 16MHz peripheral clock, normal speed, 38.4kbaud: BSEL=25.042 (bscale=0) error == 0.16%
  87:uart.c        **** 	USART.BAUDCTRLB=0;			// No bscale (no fractional rate)
  88:uart.c        **** 	USART.BAUDCTRLA=25;			// 38,400 at 16MHz per clock (see above)
  89:uart.c        **** 	#warning "Uart assuming 16Mhz F_CPU..."
  90:uart.c        **** 	#elif F_CPU==20000000UL
  91:uart.c        **** 	// 20MHz peripheral clock, double speed, 38.4kbaud: BSEL=64.10 (bscale=0) error == 0.16%
  92:uart.c        **** 	USART.BAUDCTRLB=0;			// No bscale (no fractional rate)
 190               		.loc 1 92 0
 191 006a 1782      		std Z+7,__zero_reg__
  93:uart.c        **** 	USART.BAUDCTRLA=64;			// 38,400 at 20MHz per clock (see above)
 192               		.loc 1 93 0
 193 006c 80E4      		ldi r24,lo8(64)
 194 006e 8683      		std Z+6,r24
  94:uart.c        **** 	USART.CTRLB|=(USART_CLK2X_bm);	// Set double rate
 195               		.loc 1 94 0
 196 0070 8481      		ldd r24,Z+4
 197 0072 8460      		ori r24,lo8(4)
 198 0074 8483      		std Z+4,r24
  95:uart.c        **** 	#warning "Uart assuming 20Mhz F_CPU..."
  96:uart.c        **** 	#else
  97:uart.c        **** 	#error "Can't generate a baud rate from the current F_CPU."
  98:uart.c        **** 	#endif
  99:uart.c        **** 
 100:uart.c        **** 	USART.CTRLA=0;						// No interrupts
 199               		.loc 1 100 0
 200 0076 1382      		std Z+3,__zero_reg__
 101:uart.c        **** 	USART.CTRLC=USART_CHSIZE_8BIT_gc;	// Set 8,N,1
 201               		.loc 1 101 0
 202 0078 83E0      		ldi r24,lo8(3)
 203 007a 8583      		std Z+5,r24
 102:uart.c        **** 
 103:uart.c        **** 	USART.CTRLB|=(USART_RXEN_bm|USART_TXEN_bm);	// Enable transmitter and reciever at normal rate
 204               		.loc 1 103 0
 205 007c 8481      		ldd r24,Z+4
 206 007e 8861      		ori r24,lo8(24)
 207 0080 8483      		std Z+4,r24
 104:uart.c        **** 	UartFlushBuffer();							// Get rid of any poo poo hanging out in the input buffer.
 208               		.loc 1 104 0
 209 0082 0C94 0000 		jmp UartFlushBuffer
 210               	.LVL3:
 211               		.cfi_endproc
 212               	.LFE9:
 214               	.Letext0:
 215               		.file 2 "/home/avrToolchain/avr/include/stdint.h"
 216               		.file 3 "/home/avrToolchain/avr/include/avr/iox64a3.h"
 217               		.file 4 "defines.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 uart.c
     /tmp/cclQ3FOI.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cclQ3FOI.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cclQ3FOI.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cclQ3FOI.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cclQ3FOI.s:6      *ABS*:0000000000000034 __CCP__
     /tmp/cclQ3FOI.s:7      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cclQ3FOI.s:8      *ABS*:0000000000000001 __zero_reg__
     /tmp/cclQ3FOI.s:14     .text:0000000000000000 UartTxBufferReady
     /tmp/cclQ3FOI.s:35     .text:000000000000000c UartSendByte
     /tmp/cclQ3FOI.s:57     .text:000000000000001a UartGetByte
     /tmp/cclQ3FOI.s:74     .text:0000000000000020 UartGotByte
     /tmp/cclQ3FOI.s:94     .text:000000000000002c UartWaitForByte
     /tmp/cclQ3FOI.s:116    .text:0000000000000036 UartFlushBuffer
     /tmp/cclQ3FOI.s:146    .text:0000000000000046 UnInitUart
     /tmp/cclQ3FOI.s:162    .text:000000000000004c InitUart

NO UNDEFINED SYMBOLS
