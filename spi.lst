   1               		.file	"spi.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__CCP__ = 0x34
   7               	__tmp_reg__ = 0
   8               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  11               		.cfi_sections	.debug_frame
  12               	.global	SpiTransferComplete
  14               	SpiTransferComplete:
  15               	.LFB2:
  16               		.file 1 "spi.c"
   1:spi.c         **** // SPI library for Xmegas.
   2:spi.c         **** // Fri Jul 19 17:42:41 EDT 2013
   3:spi.c         **** // TMB
   4:spi.c         **** 
   5:spi.c         **** // Pins:
   6:spi.c         **** // PD4		Chip Select
   7:spi.c         **** // PD5		MOSI
   8:spi.c         **** // PD6		MISO
   9:spi.c         **** // PD7		SCK
  10:spi.c         **** 
  11:spi.c         **** 
  12:spi.c         **** #include	"includes.h"
  13:spi.c         **** 
  14:spi.c         **** // -------------------------
  15:spi.c         **** // Control Line Macros
  16:spi.c         **** // -------------------------
  17:spi.c         **** // See SPI.h
  18:spi.c         **** // -------------------------
  19:spi.c         **** // Low Level Functions:
  20:spi.c         **** // -------------------------
  21:spi.c         **** 
  22:spi.c         **** bool SpiTransferComplete(void)
  23:spi.c         **** // Returns true if the SPI transfer interrupt complete flag is SET
  24:spi.c         **** {
  17               		.loc 1 24 0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  25:spi.c         **** 	if(SPID.STATUS&SPI_IF_bm)
  23               		.loc 1 25 0
  24 0000 8091 C209 		lds r24,2498
  26:spi.c         **** 	{
  27:spi.c         **** 		return(true);
  28:spi.c         **** 	}
  29:spi.c         **** 	return(false);
  30:spi.c         **** }
  25               		.loc 1 30 0
  26 0004 881F      		rol r24
  27 0006 8827      		clr r24
  28 0008 881F      		rol r24
  29 000a 0895      		ret
  30               		.cfi_endproc
  31               	.LFE2:
  33               	.global	TransferSpiByte
  35               	TransferSpiByte:
  36               	.LFB3:
  31:spi.c         **** 
  32:spi.c         **** unsigned char TransferSpiByte(unsigned char theByte)
  33:spi.c         **** // Loads a byte into the SPI transmit shift register, waits until the transfer is complete, and the
  34:spi.c         **** // Checks to make sure the transmitter is ready first.
  35:spi.c         **** {
  37               		.loc 1 35 0
  38               		.cfi_startproc
  39               	.LVL0:
  40               	/* prologue: function */
  41               	/* frame size = 0 */
  42               	/* stack size = 0 */
  43               	.L__stack_usage = 0
  36:spi.c         **** 
  37:spi.c         **** 	SPID.DATA=theByte;				// Load the xmit buffer and start the transfer.
  44               		.loc 1 37 0
  45 000c 8093 C309 		sts 2499,r24
  46               	.LVL1:
  47               	.L3:
  38:spi.c         **** 
  39:spi.c         **** 	while(!(SPID.STATUS&SPI_IF_bm))	// Spin until the transfer is complete
  48               		.loc 1 39 0 discriminator 1
  49 0010 8091 C209 		lds r24,2498
  50 0014 87FF      		sbrs r24,7
  51 0016 00C0      		rjmp .L3
  40:spi.c         **** 		;
  41:spi.c         **** 	return(SPID.DATA);
  52               		.loc 1 41 0
  53 0018 8091 C309 		lds r24,2499
  42:spi.c         **** }
  54               		.loc 1 42 0
  55 001c 0895      		ret
  56               		.cfi_endproc
  57               	.LFE3:
  59               	.global	DoBusyWait
  61               	DoBusyWait:
  62               	.LFB4:
  43:spi.c         **** 
  44:spi.c         **** void DoBusyWait(volatile unsigned int loops)
  45:spi.c         **** // Pull ~10 operations per loop plus overhead (probably more like 15)
  46:spi.c         **** {
  63               		.loc 1 46 0
  64               		.cfi_startproc
  65               	.LVL2:
  66 001e CF93      		push r28
  67               	.LCFI0:
  68               		.cfi_def_cfa_offset 3
  69               		.cfi_offset 28, -2
  70 0020 DF93      		push r29
  71               	.LCFI1:
  72               		.cfi_def_cfa_offset 4
  73               		.cfi_offset 29, -3
  74 0022 00D0      		rcall .
  75               	.LCFI2:
  76               		.cfi_def_cfa_offset 6
  77 0024 CDB7      		in r28,__SP_L__
  78 0026 DEB7      		in r29,__SP_H__
  79               	.LCFI3:
  80               		.cfi_def_cfa_register 28
  81               	/* prologue: function */
  82               	/* frame size = 2 */
  83               	/* stack size = 4 */
  84               	.L__stack_usage = 4
  85 0028 8983      		std Y+1,r24
  86 002a 9A83      		std Y+2,r25
  87               	.LVL3:
  88               	.L7:
  47:spi.c         **** 	while(loops--)
  89               		.loc 1 47 0
  90 002c 8981      		ldd r24,Y+1
  91 002e 9A81      		ldd r25,Y+2
  92 0030 9C01      		movw r18,r24
  93 0032 2150      		subi r18,1
  94 0034 3109      		sbc r19,__zero_reg__
  95 0036 2983      		std Y+1,r18
  96 0038 3A83      		std Y+2,r19
  97 003a 892B      		or r24,r25
  98 003c 01F0      		breq .L9
  48:spi.c         **** 	{
  49:spi.c         **** 		MACRO_DoTenNops;
  99               		.loc 1 49 0
 100               	/* #APP */
 101               	 ;  49 "spi.c" 1
 102 003e 0000      		nop
 103               	 ;  0 "" 2
 104               	 ;  49 "spi.c" 1
 105 0040 0000      		nop
 106               	 ;  0 "" 2
 107               	 ;  49 "spi.c" 1
 108 0042 0000      		nop
 109               	 ;  0 "" 2
 110               	 ;  49 "spi.c" 1
 111 0044 0000      		nop
 112               	 ;  0 "" 2
 113               	 ;  49 "spi.c" 1
 114 0046 0000      		nop
 115               	 ;  0 "" 2
 116               	 ;  49 "spi.c" 1
 117 0048 0000      		nop
 118               	 ;  0 "" 2
 119               	 ;  49 "spi.c" 1
 120 004a 0000      		nop
 121               	 ;  0 "" 2
 122               	 ;  49 "spi.c" 1
 123 004c 0000      		nop
 124               	 ;  0 "" 2
 125               	 ;  49 "spi.c" 1
 126 004e 0000      		nop
 127               	 ;  0 "" 2
 128               	 ;  49 "spi.c" 1
 129 0050 0000      		nop
 130               	 ;  0 "" 2
 131               	/* #NOAPP */
 132 0052 00C0      		rjmp .L7
 133               	.L9:
 134               	/* epilogue start */
  50:spi.c         **** 	}
  51:spi.c         **** }
 135               		.loc 1 51 0
 136 0054 0F90      		pop __tmp_reg__
 137 0056 0F90      		pop __tmp_reg__
 138 0058 DF91      		pop r29
 139 005a CF91      		pop r28
 140 005c 0895      		ret
 141               		.cfi_endproc
 142               	.LFE4:
 144               	.global	InitSpi
 146               	InitSpi:
 147               	.LFB5:
  52:spi.c         **** 
  53:spi.c         **** 
  54:spi.c         **** void InitSpi(void)
  55:spi.c         **** {
 148               		.loc 1 55 0
 149               		.cfi_startproc
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 0 */
 153               	.L__stack_usage = 0
  56:spi.c         **** 	PORTD.OUTCLR=0xF0;		// All lines low to start
 154               		.loc 1 56 0
 155 005e E0E6      		ldi r30,lo8(96)
 156 0060 F6E0      		ldi r31,lo8(6)
 157 0062 80EF      		ldi r24,lo8(-16)
 158 0064 8683      		std Z+6,r24
  57:spi.c         **** 	PORTD.DIRSET=0xB0;		// SCK, MOSI, SS to output
 159               		.loc 1 57 0
 160 0066 80EB      		ldi r24,lo8(-80)
 161 0068 8183      		std Z+1,r24
  58:spi.c         **** 	
  59:spi.c         **** 	PORTD.DIRCLR=(1<<6);	// MISO to input
 162               		.loc 1 59 0
 163 006a 80E4      		ldi r24,lo8(64)
 164 006c 8283      		std Z+2,r24
  60:spi.c         **** 	
  61:spi.c         **** 	PR.PRPD&=~PR_SPI_bm;				// Turn SPI module on (on port D)
 165               		.loc 1 61 0
 166 006e A0E7      		ldi r26,lo8(112)
 167 0070 B0E0      		ldi r27,0
 168 0072 1496      		adiw r26,4
 169 0074 8C91      		ld r24,X
 170 0076 1497      		sbiw r26,4
 171 0078 877F      		andi r24,lo8(-9)
 172 007a 1496      		adiw r26,4
 173 007c 8C93      		st X,r24
  62:spi.c         **** 	PORTD.PIN6CTRL=PORT_OPC_PULLUP_gc;	// Pull up inputs so they don't flop around
 174               		.loc 1 62 0
 175 007e 88E1      		ldi r24,lo8(24)
 176 0080 868B      		std Z+22,r24
  63:spi.c         **** 
  64:spi.c         **** 	PORTD.OUTSET=0x10;		// PD4 high (chip select)
 177               		.loc 1 64 0
 178 0082 80E1      		ldi r24,lo8(16)
 179 0084 8583      		std Z+5,r24
  65:spi.c         **** 
  66:spi.c         **** 	SPID.INTCTRL=0;											// No interrupts
 180               		.loc 1 66 0
 181 0086 E0EC      		ldi r30,lo8(-64)
 182 0088 F9E0      		ldi r31,lo8(9)
 183 008a 1182      		std Z+1,__zero_reg__
  67:spi.c         **** 
  68:spi.c         **** 	// Examples:
  69:spi.c         **** //	SPID.CTRL=SPI_ENABLE_bm|SPI_MASTER_bm|SPI_PRESCALER_DIV64_gc|SPI_MODE_3_gc;	// Enable SPI, Maste
  70:spi.c         **** //	SPID.CTRL=SPI_CLK2X_bm|SPI_ENABLE_bm|SPI_MASTER_bm|SPI_PRESCALER_DIV16_gc|SPI_MODE_3_gc;	// Enab
  71:spi.c         **** //	SPID.CTRL=SPI_CLK2X_bm|SPI_ENABLE_bm|SPI_MASTER_bm|SPI_PRESCALER_DIV4_gc|SPI_MODE_3_gc;	// Enabl
  72:spi.c         **** 
  73:spi.c         **** //	SPID.CTRL=SPI_ENABLE_bm|SPI_MASTER_bm|SPI_PRESCALER_DIV16_gc|SPI_MODE_0_gc;	// Enable SPI, Maste
  74:spi.c         **** 
  75:spi.c         **** 	SPID.CTRL=SPI_ENABLE_bm|SPI_DORD_bm|SPI_MASTER_bm|SPI_PRESCALER_DIV64_gc|SPI_MODE_3_gc;	// Enable 
 184               		.loc 1 75 0
 185 008c 8EE7      		ldi r24,lo8(126)
 186 008e 8083      		st Z,r24
 187 0090 0895      		ret
 188               		.cfi_endproc
 189               	.LFE5:
 191               	.Letext0:
 192               		.file 2 "/home/avrToolchain/avr/include/stdint.h"
 193               		.file 3 "/home/avrToolchain/avr/include/avr/iox64a3.h"
 194               		.file 4 "defines.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 spi.c
     /tmp/ccK2XHOL.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccK2XHOL.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccK2XHOL.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccK2XHOL.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccK2XHOL.s:6      *ABS*:0000000000000034 __CCP__
     /tmp/ccK2XHOL.s:7      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccK2XHOL.s:8      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccK2XHOL.s:14     .text:0000000000000000 SpiTransferComplete
     /tmp/ccK2XHOL.s:35     .text:000000000000000c TransferSpiByte
     /tmp/ccK2XHOL.s:61     .text:000000000000001e DoBusyWait
     /tmp/ccK2XHOL.s:146    .text:000000000000005e InitSpi

NO UNDEFINED SYMBOLS
