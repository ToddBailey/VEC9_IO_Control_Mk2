
vec9_io.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001858  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00802000  00001858  000018ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000098  0080204a  0080204a  00001936  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001936  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001994  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000019d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002abb  00000000  00000000  00001a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e6  00000000  00000000  0000452f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000583  00000000  00000000  00004d15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  00005298  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015a7  00000000  00000000  0000554c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000054a  00000000  00000000  00006af3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000703d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      70:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      74:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      78:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      7c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      80:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      84:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      88:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      8c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      90:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      94:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      98:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      9c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      a0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      a4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      a8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      ac:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      b0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      b4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      b8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      bc:	0c 94 26 04 	jmp	0x84c	; 0x84c <__vector_47>
      c0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      c4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      c8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      cc:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      d0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      d4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      d8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      dc:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      e0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      e4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      e8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      ec:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      f0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      f4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      f8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      fc:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     100:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__vector_64>
     104:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     108:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     10c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     110:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     114:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     118:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     11c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     120:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     124:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     128:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     12c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     130:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     134:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     138:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     13c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     140:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     144:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     148:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     14c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     150:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     154:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     158:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     15c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     160:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     164:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     168:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     16c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     170:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     174:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     178:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     17c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     180:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     184:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     188:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     18c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     190:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     194:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     198:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     19c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1a0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1a4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1a8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1ac:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1b0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1b4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1b8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1bc:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1c0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1c4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1c8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1cc:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1d0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1d4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1d8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1dc:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__vector_119>
     1e0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1e4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	cd bf       	out	0x3d, r28	; 61
     1f0:	df e2       	ldi	r29, 0x2F	; 47
     1f2:	de bf       	out	0x3e, r29	; 62

000001f4 <__do_copy_data>:
     1f4:	10 e2       	ldi	r17, 0x20	; 32
     1f6:	a0 e0       	ldi	r26, 0x00	; 0
     1f8:	b0 e2       	ldi	r27, 0x20	; 32
     1fa:	e8 e5       	ldi	r30, 0x58	; 88
     1fc:	f8 e1       	ldi	r31, 0x18	; 24
     1fe:	00 e0       	ldi	r16, 0x00	; 0
     200:	0b bf       	out	0x3b, r16	; 59
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x14>
     204:	07 90       	elpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	aa 34       	cpi	r26, 0x4A	; 74
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0x10>

0000020e <__do_clear_bss>:
     20e:	20 e2       	ldi	r18, 0x20	; 32
     210:	aa e4       	ldi	r26, 0x4A	; 74
     212:	b0 e2       	ldi	r27, 0x20	; 32
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a2 3e       	cpi	r26, 0xE2	; 226
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 13 06 	call	0xc26	; 0xc26 <main>
     222:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 1a 04 	jmp	0x834	; 0x834 <__vector_default>

0000022a <CCPWrite>:

static void CCPWrite(volatile uint8_t * address, uint8_t value)
// Assembly helper function which writes the Config Change Protection register and immediately the passed protected register.
// NOTE -- this only writes protected IO registers, not SPM/LPM.
// Cribbed more or less from AVR1003, with the non-avrgcc #if statements taken out.
{
     22a:	0f 93       	push	r16
     22c:	9c 01       	movw	r18, r24
	unsigned char
		sreg;

	sreg=SREG;		// Pause interrupts
     22e:	9f b7       	in	r25, 0x3f	; 63
	cli();
     230:	f8 94       	cli

	volatile uint8_t * tmpAddr = address;	// Redefine this locally (look this up, not sure why)
	RAMPZ = 0;								// Clear third Z indirect addressing reg
     232:	1b be       	out	0x3b, r1	; 59

	asm volatile(
     234:	f9 01       	movw	r30, r18
     236:	08 ed       	ldi	r16, 0xD8	; 216
     238:	04 bf       	out	0x34, r16	; 52
     23a:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)		// variables for above
		: "r16", "r30", "r31"												// Clobber list
		);

	SREG=sreg;		// Restore interrupts
     23c:	9f bf       	out	0x3f, r25	; 63
}
     23e:	0f 91       	pop	r16
     240:	08 95       	ret

00000242 <UartPutChar>:
//-----------------------------------------------------------------------

int UartPutChar(char c, FILE *stream)		// Associating this with FILE makes this link to stdout and lets you use printf()
// Note -- this implementation pulls in ALL KINDS of garbage from standard C libraries and leads to lots of code bloat.
// Re-write it when you have time.
{
     242:	cf 93       	push	r28
     244:	c8 2f       	mov	r28, r24
	if(c=='\n')
     246:	8a 30       	cpi	r24, 0x0A	; 10
     248:	19 f4       	brne	.+6      	; 0x250 <UartPutChar+0xe>
	{
		UartPutChar('\r', stream);				// Always follow a new line with a carriage return.
     24a:	8d e0       	ldi	r24, 0x0D	; 13
     24c:	0e 94 21 01 	call	0x242	; 0x242 <UartPutChar>
	}

	while(!(USARTF0.STATUS&USART_DREIF_bm))		// Hang here until there is room in the transmit buffer (bit is 1 when there's room)
     250:	80 91 a1 0b 	lds	r24, 0x0BA1
     254:	85 ff       	sbrs	r24, 5
     256:	fc cf       	rjmp	.-8      	; 0x250 <UartPutChar+0xe>
	{
		;
	}
	USARTF0.DATA = c;							// Then xmit the character you've been passed.
     258:	c0 93 a0 0b 	sts	0x0BA0, r28

	return(0);									// Returning an int makes this function play with printf() (no errors).
}
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	cf 91       	pop	r28
     262:	08 95       	ret

00000264 <SetOutputs>:
static void SetOutputs(void)
// Sets output bits based on what we got from the host.
{
	// High byte (Flight indicators)
	// -----------------------------------------
	if(outputByteHigh&Om_FLIGHT_IND_0)
     264:	80 91 56 20 	lds	r24, 0x2056
	{
		PORTE.OUTSET=(1<<0);
     268:	91 e0       	ldi	r25, 0x01	; 1
static void SetOutputs(void)
// Sets output bits based on what we got from the host.
{
	// High byte (Flight indicators)
	// -----------------------------------------
	if(outputByteHigh&Om_FLIGHT_IND_0)
     26a:	84 ff       	sbrs	r24, 4
     26c:	03 c0       	rjmp	.+6      	; 0x274 <SetOutputs+0x10>
	{
		PORTE.OUTSET=(1<<0);
     26e:	90 93 85 06 	sts	0x0685, r25
     272:	02 c0       	rjmp	.+4      	; 0x278 <SetOutputs+0x14>
	}
	else
	{
		PORTE.OUTCLR=(1<<0);	
     274:	90 93 86 06 	sts	0x0686, r25
	}
	if(outputByteHigh&Om_FLIGHT_IND_1)
	{
		PORTE.OUTSET=(1<<1);
     278:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		PORTE.OUTCLR=(1<<0);	
	}
	if(outputByteHigh&Om_FLIGHT_IND_1)
     27a:	83 ff       	sbrs	r24, 3
     27c:	03 c0       	rjmp	.+6      	; 0x284 <SetOutputs+0x20>
	{
		PORTE.OUTSET=(1<<1);
     27e:	90 93 85 06 	sts	0x0685, r25
     282:	02 c0       	rjmp	.+4      	; 0x288 <SetOutputs+0x24>
	}
	else
	{
		PORTE.OUTCLR=(1<<1);	
     284:	90 93 86 06 	sts	0x0686, r25
	}
	if(outputByteHigh&Om_FLIGHT_IND_2)
	{
		PORTE.OUTSET=(1<<2);
     288:	94 e0       	ldi	r25, 0x04	; 4
	}
	else
	{
		PORTE.OUTCLR=(1<<1);	
	}
	if(outputByteHigh&Om_FLIGHT_IND_2)
     28a:	82 ff       	sbrs	r24, 2
     28c:	03 c0       	rjmp	.+6      	; 0x294 <SetOutputs+0x30>
	{
		PORTE.OUTSET=(1<<2);
     28e:	90 93 85 06 	sts	0x0685, r25
     292:	02 c0       	rjmp	.+4      	; 0x298 <SetOutputs+0x34>
	}
	else
	{
		PORTE.OUTCLR=(1<<2);	
     294:	90 93 86 06 	sts	0x0686, r25
	}

	if(outputByteHigh&Om_FLIGHT_IND_3)
	{
		PORTE.OUTSET=(1<<3);
     298:	98 e0       	ldi	r25, 0x08	; 8
	else
	{
		PORTE.OUTCLR=(1<<2);	
	}

	if(outputByteHigh&Om_FLIGHT_IND_3)
     29a:	81 ff       	sbrs	r24, 1
     29c:	03 c0       	rjmp	.+6      	; 0x2a4 <SetOutputs+0x40>
	{
		PORTE.OUTSET=(1<<3);
     29e:	90 93 85 06 	sts	0x0685, r25
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <SetOutputs+0x44>
	}
	else
	{
		PORTE.OUTCLR=(1<<3);	
     2a4:	90 93 86 06 	sts	0x0686, r25
	}
	if(outputByteHigh&Om_FLIGHT_IND_4)
     2a8:	80 ff       	sbrs	r24, 0
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <SetOutputs+0x50>
	{
		PORTE.OUTSET=(1<<4);
     2ac:	80 e1       	ldi	r24, 0x10	; 16
     2ae:	80 93 85 06 	sts	0x0685, r24
     2b2:	03 c0       	rjmp	.+6      	; 0x2ba <SetOutputs+0x56>
	}
	else
	{
		PORTE.OUTCLR=(1<<4);	
     2b4:	80 e1       	ldi	r24, 0x10	; 16
     2b6:	80 93 86 06 	sts	0x0686, r24
	}

	// Middle Byte (Flight ind, horn, PB lamps)
	// ---------------------------------------------

	if(outputByteMiddle&Om_FLIGHT_IND_5)
     2ba:	80 91 55 20 	lds	r24, 0x2055
	{
		PORTE.OUTSET=(1<<5);
     2be:	90 e2       	ldi	r25, 0x20	; 32
	}

	// Middle Byte (Flight ind, horn, PB lamps)
	// ---------------------------------------------

	if(outputByteMiddle&Om_FLIGHT_IND_5)
     2c0:	87 ff       	sbrs	r24, 7
     2c2:	03 c0       	rjmp	.+6      	; 0x2ca <SetOutputs+0x66>
	{
		PORTE.OUTSET=(1<<5);
     2c4:	90 93 85 06 	sts	0x0685, r25
     2c8:	02 c0       	rjmp	.+4      	; 0x2ce <SetOutputs+0x6a>
	}
	else
	{
		PORTE.OUTCLR=(1<<5);	
     2ca:	90 93 86 06 	sts	0x0686, r25
	}
	if(outputByteMiddle&Om_FLIGHT_IND_6)
	{
		PORTE.OUTSET=(1<<6);
     2ce:	90 e4       	ldi	r25, 0x40	; 64
	}
	else
	{
		PORTE.OUTCLR=(1<<5);	
	}
	if(outputByteMiddle&Om_FLIGHT_IND_6)
     2d0:	86 ff       	sbrs	r24, 6
     2d2:	03 c0       	rjmp	.+6      	; 0x2da <SetOutputs+0x76>
	{
		PORTE.OUTSET=(1<<6);
     2d4:	90 93 85 06 	sts	0x0685, r25
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <SetOutputs+0x7a>
	}
	else
	{
		PORTE.OUTCLR=(1<<6);	
     2da:	90 93 86 06 	sts	0x0686, r25
	}
	if(outputByteMiddle&Om_FLIGHT_IND_7)
	{
		PORTE.OUTSET=(1<<7);
     2de:	90 e8       	ldi	r25, 0x80	; 128
	}
	else
	{
		PORTE.OUTCLR=(1<<6);	
	}
	if(outputByteMiddle&Om_FLIGHT_IND_7)
     2e0:	85 ff       	sbrs	r24, 5
     2e2:	03 c0       	rjmp	.+6      	; 0x2ea <SetOutputs+0x86>
	{
		PORTE.OUTSET=(1<<7);
     2e4:	90 93 85 06 	sts	0x0685, r25
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <SetOutputs+0x8a>
	}
	else
	{
		PORTE.OUTCLR=(1<<7);	
     2ea:	90 93 86 06 	sts	0x0686, r25
	}
	if(outputByteMiddle&Om_FLIGHT_IND_8)
	{
		PORTF.OUTSET=(1<<0);
     2ee:	91 e0       	ldi	r25, 0x01	; 1
	}
	else
	{
		PORTE.OUTCLR=(1<<7);	
	}
	if(outputByteMiddle&Om_FLIGHT_IND_8)
     2f0:	84 ff       	sbrs	r24, 4
     2f2:	03 c0       	rjmp	.+6      	; 0x2fa <SetOutputs+0x96>
	{
		PORTF.OUTSET=(1<<0);
     2f4:	90 93 a5 06 	sts	0x06A5, r25
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <SetOutputs+0x9a>
	}
	else
	{
		PORTF.OUTCLR=(1<<0);	
     2fa:	90 93 a6 06 	sts	0x06A6, r25
	}
	if(outputByteMiddle&Om_FLIGHT_IND_9)
	{
		PORTF.OUTSET=(1<<1);
     2fe:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		PORTF.OUTCLR=(1<<0);	
	}
	if(outputByteMiddle&Om_FLIGHT_IND_9)
     300:	83 ff       	sbrs	r24, 3
     302:	03 c0       	rjmp	.+6      	; 0x30a <SetOutputs+0xa6>
	{
		PORTF.OUTSET=(1<<1);
     304:	90 93 a5 06 	sts	0x06A5, r25
     308:	02 c0       	rjmp	.+4      	; 0x30e <SetOutputs+0xaa>
	}
	else
	{
		PORTF.OUTCLR=(1<<1);	
     30a:	90 93 a6 06 	sts	0x06A6, r25
	}
	if(outputByteMiddle&Om_AIR_HORN)
	{
		PORTC.OUTSET=(1<<5);
     30e:	90 e2       	ldi	r25, 0x20	; 32
	}
	else
	{
		PORTF.OUTCLR=(1<<1);	
	}
	if(outputByteMiddle&Om_AIR_HORN)
     310:	82 ff       	sbrs	r24, 2
     312:	03 c0       	rjmp	.+6      	; 0x31a <SetOutputs+0xb6>
	{
		PORTC.OUTSET=(1<<5);
     314:	90 93 45 06 	sts	0x0645, r25
     318:	02 c0       	rjmp	.+4      	; 0x31e <SetOutputs+0xba>
	}
	else
	{
		PORTC.OUTCLR=(1<<5);	
     31a:	90 93 46 06 	sts	0x0646, r25
	}
	if(outputByteMiddle&Om_PUSHBUTTON_LAMP_0)
	{
		PORTC.OUTSET=(1<<3);
     31e:	98 e0       	ldi	r25, 0x08	; 8
	}
	else
	{
		PORTC.OUTCLR=(1<<5);	
	}
	if(outputByteMiddle&Om_PUSHBUTTON_LAMP_0)
     320:	81 ff       	sbrs	r24, 1
     322:	03 c0       	rjmp	.+6      	; 0x32a <SetOutputs+0xc6>
	{
		PORTC.OUTSET=(1<<3);
     324:	90 93 45 06 	sts	0x0645, r25
     328:	02 c0       	rjmp	.+4      	; 0x32e <SetOutputs+0xca>
	}
	else
	{
		PORTC.OUTCLR=(1<<3);	
     32a:	90 93 46 06 	sts	0x0646, r25
	}
	if(outputByteMiddle&Om_PUSHBUTTON_LAMP_1)
     32e:	80 ff       	sbrs	r24, 0
     330:	04 c0       	rjmp	.+8      	; 0x33a <SetOutputs+0xd6>
	{
		PORTC.OUTSET=(1<<4);
     332:	80 e1       	ldi	r24, 0x10	; 16
     334:	80 93 45 06 	sts	0x0645, r24
     338:	03 c0       	rjmp	.+6      	; 0x340 <SetOutputs+0xdc>
	}
	else
	{
		PORTC.OUTCLR=(1<<4);	
     33a:	80 e1       	ldi	r24, 0x10	; 16
     33c:	80 93 46 06 	sts	0x0646, r24

	// Low Byte (Damage / Code LEDs)
	// Note -- invert these (hex inverts buffer AVR's outputs)
	// --------------------------------------------------------

	if(outputByteLow&Om_GREEN_LED_0)
     340:	80 91 54 20 	lds	r24, 0x2054
	{
		PORTD.OUTCLR=(1<<4);
     344:	90 e1       	ldi	r25, 0x10	; 16

	// Low Byte (Damage / Code LEDs)
	// Note -- invert these (hex inverts buffer AVR's outputs)
	// --------------------------------------------------------

	if(outputByteLow&Om_GREEN_LED_0)
     346:	87 ff       	sbrs	r24, 7
     348:	03 c0       	rjmp	.+6      	; 0x350 <SetOutputs+0xec>
	{
		PORTD.OUTCLR=(1<<4);
     34a:	90 93 66 06 	sts	0x0666, r25
     34e:	02 c0       	rjmp	.+4      	; 0x354 <SetOutputs+0xf0>
	}
	else
	{
		PORTD.OUTSET=(1<<4);	
     350:	90 93 65 06 	sts	0x0665, r25
	}
	if(outputByteLow&Om_GREEN_LED_1)
	{
		PORTD.OUTCLR=(1<<5);
     354:	90 e2       	ldi	r25, 0x20	; 32
	}
	else
	{
		PORTD.OUTSET=(1<<4);	
	}
	if(outputByteLow&Om_GREEN_LED_1)
     356:	86 ff       	sbrs	r24, 6
     358:	03 c0       	rjmp	.+6      	; 0x360 <SetOutputs+0xfc>
	{
		PORTD.OUTCLR=(1<<5);
     35a:	90 93 66 06 	sts	0x0666, r25
     35e:	02 c0       	rjmp	.+4      	; 0x364 <SetOutputs+0x100>
	}
	else
	{
		PORTD.OUTSET=(1<<5);	
     360:	90 93 65 06 	sts	0x0665, r25
	}
	if(outputByteLow&Om_GREEN_LED_2)
	{
		PORTD.OUTCLR=(1<<6);
     364:	90 e4       	ldi	r25, 0x40	; 64
	}
	else
	{
		PORTD.OUTSET=(1<<5);	
	}
	if(outputByteLow&Om_GREEN_LED_2)
     366:	85 ff       	sbrs	r24, 5
     368:	03 c0       	rjmp	.+6      	; 0x370 <SetOutputs+0x10c>
	{
		PORTD.OUTCLR=(1<<6);
     36a:	90 93 66 06 	sts	0x0666, r25
     36e:	02 c0       	rjmp	.+4      	; 0x374 <SetOutputs+0x110>
	}
	else
	{
		PORTD.OUTSET=(1<<6);	
     370:	90 93 65 06 	sts	0x0665, r25
	}
	if(outputByteLow&Om_GREEN_LED_3)
	{
		PORTD.OUTCLR=(1<<7);
     374:	90 e8       	ldi	r25, 0x80	; 128
	}
	else
	{
		PORTD.OUTSET=(1<<6);	
	}
	if(outputByteLow&Om_GREEN_LED_3)
     376:	84 ff       	sbrs	r24, 4
     378:	03 c0       	rjmp	.+6      	; 0x380 <SetOutputs+0x11c>
	{
		PORTD.OUTCLR=(1<<7);
     37a:	90 93 66 06 	sts	0x0666, r25
     37e:	02 c0       	rjmp	.+4      	; 0x384 <SetOutputs+0x120>
	}
	else
	{
		PORTD.OUTSET=(1<<7);	
     380:	90 93 65 06 	sts	0x0665, r25
	}
	if(outputByteLow&Om_RED_LED_0)
	{
		PORTD.OUTCLR=(1<<0);
     384:	91 e0       	ldi	r25, 0x01	; 1
	}
	else
	{
		PORTD.OUTSET=(1<<7);	
	}
	if(outputByteLow&Om_RED_LED_0)
     386:	83 ff       	sbrs	r24, 3
     388:	03 c0       	rjmp	.+6      	; 0x390 <SetOutputs+0x12c>
	{
		PORTD.OUTCLR=(1<<0);
     38a:	90 93 66 06 	sts	0x0666, r25
     38e:	02 c0       	rjmp	.+4      	; 0x394 <SetOutputs+0x130>
	}
	else
	{
		PORTD.OUTSET=(1<<0);	
     390:	90 93 65 06 	sts	0x0665, r25
	}
	if(outputByteLow&Om_RED_LED_1)
	{
		PORTD.OUTCLR=(1<<1);
     394:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		PORTD.OUTSET=(1<<0);	
	}
	if(outputByteLow&Om_RED_LED_1)
     396:	82 ff       	sbrs	r24, 2
     398:	03 c0       	rjmp	.+6      	; 0x3a0 <SetOutputs+0x13c>
	{
		PORTD.OUTCLR=(1<<1);
     39a:	90 93 66 06 	sts	0x0666, r25
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <SetOutputs+0x140>
	}
	else
	{
		PORTD.OUTSET=(1<<1);	
     3a0:	90 93 65 06 	sts	0x0665, r25
	}
	if(outputByteLow&Om_RED_LED_2)
	{
		PORTD.OUTCLR=(1<<2);
     3a4:	94 e0       	ldi	r25, 0x04	; 4
	}
	else
	{
		PORTD.OUTSET=(1<<1);	
	}
	if(outputByteLow&Om_RED_LED_2)
     3a6:	81 ff       	sbrs	r24, 1
     3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <SetOutputs+0x14c>
	{
		PORTD.OUTCLR=(1<<2);
     3aa:	90 93 66 06 	sts	0x0666, r25
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <SetOutputs+0x150>
	}
	else
	{
		PORTD.OUTSET=(1<<2);	
     3b0:	90 93 65 06 	sts	0x0665, r25
	}
	if(outputByteLow&Om_RED_LED_3)
     3b4:	80 ff       	sbrs	r24, 0
     3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <SetOutputs+0x15c>
	{
		PORTD.OUTCLR=(1<<3);
     3b8:	88 e0       	ldi	r24, 0x08	; 8
     3ba:	80 93 66 06 	sts	0x0666, r24
     3be:	08 95       	ret
	}
	else
	{
		PORTD.OUTSET=(1<<3);	
     3c0:	88 e0       	ldi	r24, 0x08	; 8
     3c2:	80 93 65 06 	sts	0x0665, r24
     3c6:	08 95       	ret

000003c8 <DoStartupTest>:


static void DoStartupTest(void)
// At power on, go here and make pretty / diagnostic light chases until the game boots.
// Leave this state when we start receiving bytes over serial.
{
     3c8:	cf 93       	push	r28

	static unsigned char
		shiftIndex,
		lampCounter;
	
	if(subState==SS_0)					// Horn intro
     3ca:	c0 91 d3 20 	lds	r28, 0x20D3
     3ce:	c1 11       	cpse	r28, r1
     3d0:	0f c0       	rjmp	.+30     	; 0x3f0 <DoStartupTest+0x28>
	{
		SetTimer(TIMER_1,(HORN_INTRO_TIME));
     3d2:	6e ee       	ldi	r22, 0xEE	; 238
     3d4:	72 e0       	ldi	r23, 0x02	; 2
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 d6 05 	call	0xbac	; 0xbac <SetTimer>
		outputByteMiddle=Om_AIR_HORN;
		outputByteHigh=(Om_FLIGHT_IND_0|Om_FLIGHT_IND_1);
     3dc:	88 e1       	ldi	r24, 0x18	; 24
     3de:	80 93 56 20 	sts	0x2056, r24
		outputByteMiddle|=Om_PUSHBUTTON_LAMP_1;
     3e2:	85 e0       	ldi	r24, 0x05	; 5
     3e4:	80 93 55 20 	sts	0x2055, r24
		SetOutputs();
     3e8:	0e 94 32 01 	call	0x264	; 0x264 <SetOutputs>
		subState=SS_1;
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	31 c0       	rjmp	.+98     	; 0x452 <DoStartupTest+0x8a>
	}
	else if(subState==SS_1)
     3f0:	c1 30       	cpi	r28, 0x01	; 1
     3f2:	b1 f4       	brne	.+44     	; 0x420 <DoStartupTest+0x58>
	{
		if(CheckTimer(TIMER_1))
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <CheckTimer>
     3fa:	88 23       	and	r24, r24
     3fc:	09 f4       	brne	.+2      	; 0x400 <DoStartupTest+0x38>
     3fe:	fa c1       	rjmp	.+1012   	; 0x7f4 <DoStartupTest+0x42c>
		{
			SetTimer(TIMER_1,(HORN_INTRO_TIME));
     400:	6e ee       	ldi	r22, 0xEE	; 238
     402:	72 e0       	ldi	r23, 0x02	; 2
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	0e 94 d6 05 	call	0xbac	; 0xbac <SetTimer>
			outputByteMiddle=0;
			outputByteHigh=(Om_FLIGHT_IND_0|Om_FLIGHT_IND_1|Om_FLIGHT_IND_2|Om_FLIGHT_IND_3);
     40a:	8e e1       	ldi	r24, 0x1E	; 30
     40c:	80 93 56 20 	sts	0x2056, r24
			outputByteMiddle|=Om_PUSHBUTTON_LAMP_0;
     410:	c2 e0       	ldi	r28, 0x02	; 2
     412:	c0 93 55 20 	sts	0x2055, r28
			SetOutputs();
     416:	0e 94 32 01 	call	0x264	; 0x264 <SetOutputs>
			subState=SS_2;	
     41a:	c0 93 d3 20 	sts	0x20D3, r28
     41e:	ea c1       	rjmp	.+980    	; 0x7f4 <DoStartupTest+0x42c>
		}
	}
	else if(subState==SS_2)
     420:	c2 30       	cpi	r28, 0x02	; 2
     422:	d1 f4       	brne	.+52     	; 0x458 <DoStartupTest+0x90>
	{
		if(CheckTimer(TIMER_1))
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <CheckTimer>
     42a:	88 23       	and	r24, r24
     42c:	09 f4       	brne	.+2      	; 0x430 <DoStartupTest+0x68>
     42e:	e2 c1       	rjmp	.+964    	; 0x7f4 <DoStartupTest+0x42c>
		{
			SetTimer(TIMER_1,(HORN_INTRO_TIME));
     430:	6e ee       	ldi	r22, 0xEE	; 238
     432:	72 e0       	ldi	r23, 0x02	; 2
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	0e 94 d6 05 	call	0xbac	; 0xbac <SetTimer>
			outputByteMiddle=Om_AIR_HORN;
			outputByteHigh=(Om_FLIGHT_IND_2|Om_FLIGHT_IND_3|Om_FLIGHT_IND_4);
     43a:	87 e0       	ldi	r24, 0x07	; 7
     43c:	80 93 56 20 	sts	0x2056, r24
			outputByteMiddle|=Om_FLIGHT_IND_5;
     440:	84 e8       	ldi	r24, 0x84	; 132
     442:	80 93 55 20 	sts	0x2055, r24
			outputByteLow=Om_RED_LED_3;
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	80 93 54 20 	sts	0x2054, r24
			SetOutputs();
     44c:	0e 94 32 01 	call	0x264	; 0x264 <SetOutputs>
			subState=SS_3;	
     450:	83 e0       	ldi	r24, 0x03	; 3
     452:	80 93 d3 20 	sts	0x20D3, r24
     456:	ce c1       	rjmp	.+924    	; 0x7f4 <DoStartupTest+0x42c>
		}
	}
	else if(subState==SS_3)
     458:	c3 30       	cpi	r28, 0x03	; 3
     45a:	c1 f4       	brne	.+48     	; 0x48c <DoStartupTest+0xc4>
	{
		if(CheckTimer(TIMER_1))
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <CheckTimer>
     462:	88 23       	and	r24, r24
     464:	09 f4       	brne	.+2      	; 0x468 <DoStartupTest+0xa0>
     466:	c6 c1       	rjmp	.+908    	; 0x7f4 <DoStartupTest+0x42c>
		{
			SetTimer(TIMER_1,(HORN_INTRO_TIME));
     468:	6e ee       	ldi	r22, 0xEE	; 238
     46a:	72 e0       	ldi	r23, 0x02	; 2
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	0e 94 d6 05 	call	0xbac	; 0xbac <SetTimer>
			outputByteMiddle=0;
			outputByteHigh=Om_FLIGHT_IND_4;
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	80 93 56 20 	sts	0x2056, r24
			outputByteMiddle|=(Om_FLIGHT_IND_5|Om_FLIGHT_IND_6|Om_FLIGHT_IND_7);
     478:	80 ee       	ldi	r24, 0xE0	; 224
     47a:	80 93 55 20 	sts	0x2055, r24
			outputByteLow=Om_RED_LED_2;
     47e:	82 e0       	ldi	r24, 0x02	; 2
     480:	80 93 54 20 	sts	0x2054, r24
			SetOutputs();
     484:	0e 94 32 01 	call	0x264	; 0x264 <SetOutputs>
			subState=SS_4;	
     488:	84 e0       	ldi	r24, 0x04	; 4
     48a:	e3 cf       	rjmp	.-58     	; 0x452 <DoStartupTest+0x8a>
		}
	}
	else if(subState==SS_4)
     48c:	c4 30       	cpi	r28, 0x04	; 4
     48e:	b1 f4       	brne	.+44     	; 0x4bc <DoStartupTest+0xf4>
	{
		if(CheckTimer(TIMER_1))
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <CheckTimer>
     496:	88 23       	and	r24, r24
     498:	09 f4       	brne	.+2      	; 0x49c <DoStartupTest+0xd4>
     49a:	ac c1       	rjmp	.+856    	; 0x7f4 <DoStartupTest+0x42c>
		{
			SetTimer(TIMER_1,(HORN_INTRO_TIME));
     49c:	6e ee       	ldi	r22, 0xEE	; 238
     49e:	72 e0       	ldi	r23, 0x02	; 2
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	0e 94 d6 05 	call	0xbac	; 0xbac <SetTimer>
			outputByteMiddle=Om_AIR_HORN;
			outputByteHigh=0;
     4a6:	10 92 56 20 	sts	0x2056, r1
			outputByteMiddle|=(Om_FLIGHT_IND_6|Om_FLIGHT_IND_7|Om_FLIGHT_IND_8|Om_FLIGHT_IND_9);
     4aa:	8c e7       	ldi	r24, 0x7C	; 124
     4ac:	80 93 55 20 	sts	0x2055, r24
			outputByteLow=Om_RED_LED_1;
     4b0:	c0 93 54 20 	sts	0x2054, r28
			SetOutputs();
     4b4:	0e 94 32 01 	call	0x264	; 0x264 <SetOutputs>
			subState=SS_5;	
     4b8:	85 e0       	ldi	r24, 0x05	; 5
     4ba:	cb cf       	rjmp	.-106    	; 0x452 <DoStartupTest+0x8a>
		}
	}
	else if(subState==SS_5)
     4bc:	c5 30       	cpi	r28, 0x05	; 5
     4be:	a9 f4       	brne	.+42     	; 0x4ea <DoStartupTest+0x122>
	{
		if(CheckTimer(TIMER_1))
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <CheckTimer>
     4c6:	88 23       	and	r24, r24
     4c8:	09 f4       	brne	.+2      	; 0x4cc <DoStartupTest+0x104>
     4ca:	94 c1       	rjmp	.+808    	; 0x7f4 <DoStartupTest+0x42c>
		{
			SetTimer(TIMER_1,(HORN_INTRO_TIME));
     4cc:	6e ee       	ldi	r22, 0xEE	; 238
     4ce:	72 e0       	ldi	r23, 0x02	; 2
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	0e 94 d6 05 	call	0xbac	; 0xbac <SetTimer>
			outputByteMiddle=0;
			outputByteMiddle|=(Om_FLIGHT_IND_8|Om_FLIGHT_IND_9);
     4d6:	88 e1       	ldi	r24, 0x18	; 24
     4d8:	80 93 55 20 	sts	0x2055, r24
			outputByteLow=Om_RED_LED_0;
     4dc:	88 e0       	ldi	r24, 0x08	; 8
     4de:	80 93 54 20 	sts	0x2054, r24
			SetOutputs();
     4e2:	0e 94 32 01 	call	0x264	; 0x264 <SetOutputs>
			subState=SS_6;	
     4e6:	86 e0       	ldi	r24, 0x06	; 6
     4e8:	b4 cf       	rjmp	.-152    	; 0x452 <DoStartupTest+0x8a>
		}
	}
	else if(subState==SS_6)
     4ea:	c6 30       	cpi	r28, 0x06	; 6
     4ec:	a9 f4       	brne	.+42     	; 0x518 <DoStartupTest+0x150>
	{
		if(CheckTimer(TIMER_1))
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <CheckTimer>
     4f4:	88 23       	and	r24, r24
     4f6:	09 f4       	brne	.+2      	; 0x4fa <DoStartupTest+0x132>
     4f8:	7d c1       	rjmp	.+762    	; 0x7f4 <DoStartupTest+0x42c>
		{
			SetTimer(TIMER_1,(HORN_INTRO_TIME));
     4fa:	6e ee       	ldi	r22, 0xEE	; 238
     4fc:	72 e0       	ldi	r23, 0x02	; 2
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	0e 94 d6 05 	call	0xbac	; 0xbac <SetTimer>
			outputByteMiddle=Om_AIR_HORN;
     504:	84 e0       	ldi	r24, 0x04	; 4
     506:	80 93 55 20 	sts	0x2055, r24
			outputByteLow=(Om_GREEN_LED_0|Om_GREEN_LED_1|Om_GREEN_LED_2|Om_GREEN_LED_3);
     50a:	80 ef       	ldi	r24, 0xF0	; 240
     50c:	80 93 54 20 	sts	0x2054, r24

			SetOutputs();
     510:	0e 94 32 01 	call	0x264	; 0x264 <SetOutputs>
			subState=SS_7;	
     514:	87 e0       	ldi	r24, 0x07	; 7
     516:	9d cf       	rjmp	.-198    	; 0x452 <DoStartupTest+0x8a>
		}
	}
	else if(subState==SS_7)
     518:	c7 30       	cpi	r28, 0x07	; 7
     51a:	f1 f4       	brne	.+60     	; 0x558 <DoStartupTest+0x190>
	{
		if(CheckTimer(TIMER_1))
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <CheckTimer>
     522:	88 23       	and	r24, r24
     524:	09 f4       	brne	.+2      	; 0x528 <DoStartupTest+0x160>
     526:	66 c1       	rjmp	.+716    	; 0x7f4 <DoStartupTest+0x42c>
		{
			SetTimer(TIMER_1,(CHASE_TIME));
     528:	67 e7       	ldi	r22, 0x77	; 119
     52a:	71 e0       	ldi	r23, 0x01	; 1
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	0e 94 d6 05 	call	0xbac	; 0xbac <SetTimer>
			SetTimer(TIMER_2,(LAMP_TIME));
     532:	60 ea       	ldi	r22, 0xA0	; 160
     534:	7f e0       	ldi	r23, 0x0F	; 15
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	0e 94 d6 05 	call	0xbac	; 0xbac <SetTimer>

			outputByteHigh=0;
     53c:	10 92 56 20 	sts	0x2056, r1
			outputByteMiddle=0;
     540:	10 92 55 20 	sts	0x2055, r1
			outputByteLow=0;
     544:	10 92 54 20 	sts	0x2054, r1
			SetOutputs();
     548:	0e 94 32 01 	call	0x264	; 0x264 <SetOutputs>

			shiftIndex=0;
     54c:	10 92 51 20 	sts	0x2051, r1
			lampCounter=0;
     550:	10 92 50 20 	sts	0x2050, r1

			subState=SS_8;	
     554:	88 e0       	ldi	r24, 0x08	; 8
     556:	7d cf       	rjmp	.-262    	; 0x452 <DoStartupTest+0x8a>
		}
	}	
	// LIGHT CHASE -----------------------------
	else if(subState==SS_8)
     558:	c8 30       	cpi	r28, 0x08	; 8
     55a:	09 f0       	breq	.+2      	; 0x55e <DoStartupTest+0x196>
     55c:	4b c1       	rjmp	.+662    	; 0x7f4 <DoStartupTest+0x42c>
	{
		lastOutputByteHigh=outputByteHigh;
     55e:	80 91 56 20 	lds	r24, 0x2056
     562:	80 93 4f 20 	sts	0x204F, r24
		lastOutputByteMiddle=outputByteMiddle;
     566:	80 91 55 20 	lds	r24, 0x2055
     56a:	80 93 4e 20 	sts	0x204E, r24
		lastOutputByteLow=outputByteLow;
     56e:	80 91 54 20 	lds	r24, 0x2054
     572:	80 93 4d 20 	sts	0x204D, r24
	
		if(CheckTimer(TIMER_1))		// Update Green LEDs
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <CheckTimer>
     57c:	88 23       	and	r24, r24
     57e:	e1 f1       	breq	.+120    	; 0x5f8 <DoStartupTest+0x230>
		{
			shiftIndex++;
     580:	90 91 51 20 	lds	r25, 0x2051
     584:	9f 5f       	subi	r25, 0xFF	; 255
     586:	90 93 51 20 	sts	0x2051, r25

			if(shiftIndex<5)	// LEDs marching up
     58a:	95 30       	cpi	r25, 0x05	; 5
     58c:	98 f4       	brcc	.+38     	; 0x5b4 <DoStartupTest+0x1ec>
			{
				// Clear Green LEDs
				outputByteLow&=~(Om_GREEN_LED_0|Om_GREEN_LED_1|Om_GREEN_LED_2|Om_GREEN_LED_3);
     58e:	80 91 54 20 	lds	r24, 0x2054
     592:	8f 70       	andi	r24, 0x0F	; 15

				if(shiftIndex>=1)
     594:	99 23       	and	r25, r25
     596:	01 f1       	breq	.+64     	; 0x5d8 <DoStartupTest+0x210>
				{
					outputByteLow|=Om_GREEN_LED_0;
				}
				if(shiftIndex>=2)
     598:	91 30       	cpi	r25, 0x01	; 1
     59a:	11 f4       	brne	.+4      	; 0x5a0 <DoStartupTest+0x1d8>
				// Clear Green LEDs
				outputByteLow&=~(Om_GREEN_LED_0|Om_GREEN_LED_1|Om_GREEN_LED_2|Om_GREEN_LED_3);

				if(shiftIndex>=1)
				{
					outputByteLow|=Om_GREEN_LED_0;
     59c:	80 68       	ori	r24, 0x80	; 128
     59e:	1c c0       	rjmp	.+56     	; 0x5d8 <DoStartupTest+0x210>
				}
				if(shiftIndex>=2)
				{
					outputByteLow|=Om_GREEN_LED_1;
				}
				if(shiftIndex>=3)
     5a0:	92 30       	cpi	r25, 0x02	; 2
     5a2:	11 f4       	brne	.+4      	; 0x5a8 <DoStartupTest+0x1e0>
				{
					outputByteLow|=Om_GREEN_LED_0;
				}
				if(shiftIndex>=2)
				{
					outputByteLow|=Om_GREEN_LED_1;
     5a4:	80 6c       	ori	r24, 0xC0	; 192
     5a6:	18 c0       	rjmp	.+48     	; 0x5d8 <DoStartupTest+0x210>
				}
				if(shiftIndex>=3)
				{
					outputByteLow|=Om_GREEN_LED_2;
				}
				if(shiftIndex>=4)
     5a8:	94 30       	cpi	r25, 0x04	; 4
     5aa:	11 f0       	breq	.+4      	; 0x5b0 <DoStartupTest+0x1e8>
				{
					outputByteLow|=Om_GREEN_LED_1;
				}
				if(shiftIndex>=3)
				{
					outputByteLow|=Om_GREEN_LED_2;
     5ac:	80 6e       	ori	r24, 0xE0	; 224
     5ae:	14 c0       	rjmp	.+40     	; 0x5d8 <DoStartupTest+0x210>
				}
				if(shiftIndex>=4)
				{
					outputByteLow|=Om_GREEN_LED_3;
     5b0:	80 6f       	ori	r24, 0xF0	; 240
     5b2:	12 c0       	rjmp	.+36     	; 0x5d8 <DoStartupTest+0x210>
				}
			}
			else if(shiftIndex<9)	// Leds marching off
     5b4:	99 30       	cpi	r25, 0x09	; 9
     5b6:	98 f4       	brcc	.+38     	; 0x5de <DoStartupTest+0x216>
			{
				// Set Green LEDs
				outputByteLow|=(Om_GREEN_LED_0|Om_GREEN_LED_1|Om_GREEN_LED_2|Om_GREEN_LED_3);
     5b8:	80 91 54 20 	lds	r24, 0x2054

				if(shiftIndex>=5)
				{
					outputByteLow&=~Om_GREEN_LED_0;
				}
				if(shiftIndex>=6)
     5bc:	95 30       	cpi	r25, 0x05	; 5
     5be:	19 f4       	brne	.+6      	; 0x5c6 <DoStartupTest+0x1fe>
				// Set Green LEDs
				outputByteLow|=(Om_GREEN_LED_0|Om_GREEN_LED_1|Om_GREEN_LED_2|Om_GREEN_LED_3);

				if(shiftIndex>=5)
				{
					outputByteLow&=~Om_GREEN_LED_0;
     5c0:	8f 77       	andi	r24, 0x7F	; 127
     5c2:	80 67       	ori	r24, 0x70	; 112
     5c4:	09 c0       	rjmp	.+18     	; 0x5d8 <DoStartupTest+0x210>
				}
				if(shiftIndex>=6)
				{
					outputByteLow&=~Om_GREEN_LED_1;
				}
				if(shiftIndex>=7)
     5c6:	96 30       	cpi	r25, 0x06	; 6
     5c8:	19 f4       	brne	.+6      	; 0x5d0 <DoStartupTest+0x208>
				{
					outputByteLow&=~Om_GREEN_LED_0;
				}
				if(shiftIndex>=6)
				{
					outputByteLow&=~Om_GREEN_LED_1;
     5ca:	8f 73       	andi	r24, 0x3F	; 63
     5cc:	80 63       	ori	r24, 0x30	; 48
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <DoStartupTest+0x210>
				}
				if(shiftIndex>=7)
				{
					outputByteLow&=~Om_GREEN_LED_2;
				}
				if(shiftIndex>=8)
     5d0:	98 30       	cpi	r25, 0x08	; 8
     5d2:	49 f0       	breq	.+18     	; 0x5e6 <DoStartupTest+0x21e>
				{
					outputByteLow&=~Om_GREEN_LED_1;
				}
				if(shiftIndex>=7)
				{
					outputByteLow&=~Om_GREEN_LED_2;
     5d4:	8f 71       	andi	r24, 0x1F	; 31
     5d6:	80 61       	ori	r24, 0x10	; 16
     5d8:	80 93 54 20 	sts	0x2054, r24
     5dc:	08 c0       	rjmp	.+16     	; 0x5ee <DoStartupTest+0x226>
				if(shiftIndex>=8)
				{
					outputByteLow&=~Om_GREEN_LED_3;
				}			
			}
			else if(shiftIndex<13)	// No green LEDs, pause
     5de:	9d 30       	cpi	r25, 0x0D	; 13
     5e0:	20 f4       	brcc	.+8      	; 0x5ea <DoStartupTest+0x222>
			{
				outputByteLow&=~(Om_GREEN_LED_0|Om_GREEN_LED_1|Om_GREEN_LED_2|Om_GREEN_LED_3);
     5e2:	80 91 54 20 	lds	r24, 0x2054
     5e6:	8f 70       	andi	r24, 0x0F	; 15
     5e8:	f7 cf       	rjmp	.-18     	; 0x5d8 <DoStartupTest+0x210>
			}
			else
			{
				shiftIndex=0;
     5ea:	10 92 51 20 	sts	0x2051, r1
			}

			SetTimer(TIMER_1,(CHASE_TIME));
     5ee:	67 e7       	ldi	r22, 0x77	; 119
     5f0:	71 e0       	ldi	r23, 0x01	; 1
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	0e 94 d6 05 	call	0xbac	; 0xbac <SetTimer>
		}
		
		if(CheckTimer(TIMER_2))		// Chase pushbutton lamps if we aren't fussing with them
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <CheckTimer>
     5fe:	88 23       	and	r24, r24
     600:	11 f1       	breq	.+68     	; 0x646 <DoStartupTest+0x27e>
		{
			lampCounter++;
     602:	80 91 50 20 	lds	r24, 0x2050
     606:	8f 5f       	subi	r24, 0xFF	; 255
			if(lampCounter>=4)
     608:	84 30       	cpi	r24, 0x04	; 4
     60a:	18 f4       	brcc	.+6      	; 0x612 <DoStartupTest+0x24a>
			SetTimer(TIMER_1,(CHASE_TIME));
		}
		
		if(CheckTimer(TIMER_2))		// Chase pushbutton lamps if we aren't fussing with them
		{
			lampCounter++;
     60c:	80 93 50 20 	sts	0x2050, r24
     610:	02 c0       	rjmp	.+4      	; 0x616 <DoStartupTest+0x24e>
			if(lampCounter>=4)
			{
				lampCounter=0;
     612:	10 92 50 20 	sts	0x2050, r1
			}

			outputByteMiddle&=~Om_PUSHBUTTON_LAMP_0;		
			outputByteMiddle&=~Om_PUSHBUTTON_LAMP_1;		
     616:	80 91 55 20 	lds	r24, 0x2055
     61a:	8c 7f       	andi	r24, 0xFC	; 252
     61c:	80 93 55 20 	sts	0x2055, r24

			if(lampCounter&0x01)
     620:	90 91 50 20 	lds	r25, 0x2050
     624:	90 ff       	sbrs	r25, 0
     626:	03 c0       	rjmp	.+6      	; 0x62e <DoStartupTest+0x266>
			{
				outputByteMiddle|=Om_PUSHBUTTON_LAMP_0;
     628:	82 60       	ori	r24, 0x02	; 2
     62a:	80 93 55 20 	sts	0x2055, r24
			}
			if(lampCounter&0x02)
     62e:	91 ff       	sbrs	r25, 1
     630:	05 c0       	rjmp	.+10     	; 0x63c <DoStartupTest+0x274>
			{
				outputByteMiddle|=Om_PUSHBUTTON_LAMP_1;
     632:	80 91 55 20 	lds	r24, 0x2055
     636:	81 60       	ori	r24, 0x01	; 1
     638:	80 93 55 20 	sts	0x2055, r24
			}

			SetTimer(TIMER_2,(LAMP_TIME));
     63c:	60 ea       	ldi	r22, 0xA0	; 160
     63e:	7f e0       	ldi	r23, 0x0F	; 15
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	0e 94 d6 05 	call	0xbac	; 0xbac <SetTimer>
		}

		// Set pushbutton lamps if we're holding them, clear on release
		if(keyState&Im_PUSHBUTTON_0)		
     646:	80 91 67 20 	lds	r24, 0x2067
     64a:	90 91 68 20 	lds	r25, 0x2068
     64e:	20 91 55 20 	lds	r18, 0x2055
     652:	92 ff       	sbrs	r25, 2
     654:	02 c0       	rjmp	.+4      	; 0x65a <DoStartupTest+0x292>
		{
			outputByteMiddle|=Om_PUSHBUTTON_LAMP_0;
     656:	22 60       	ori	r18, 0x02	; 2
     658:	07 c0       	rjmp	.+14     	; 0x668 <DoStartupTest+0x2a0>
		}
		else if(newKeysReleased&Im_PUSHBUTTON_0)
     65a:	40 91 63 20 	lds	r20, 0x2063
     65e:	50 91 64 20 	lds	r21, 0x2064
     662:	52 ff       	sbrs	r21, 2
     664:	03 c0       	rjmp	.+6      	; 0x66c <DoStartupTest+0x2a4>
		{
			outputByteMiddle&=~Om_PUSHBUTTON_LAMP_0;		
     666:	2d 7f       	andi	r18, 0xFD	; 253
     668:	20 93 55 20 	sts	0x2055, r18
     66c:	20 91 55 20 	lds	r18, 0x2055
		}

		if(keyState&Im_PUSHBUTTON_1)		
     670:	93 ff       	sbrs	r25, 3
     672:	02 c0       	rjmp	.+4      	; 0x678 <DoStartupTest+0x2b0>
		{
			outputByteMiddle|=Om_PUSHBUTTON_LAMP_1;
     674:	21 60       	ori	r18, 0x01	; 1
     676:	07 c0       	rjmp	.+14     	; 0x686 <DoStartupTest+0x2be>
		}
		else if(newKeysReleased&Im_PUSHBUTTON_1)
     678:	40 91 63 20 	lds	r20, 0x2063
     67c:	50 91 64 20 	lds	r21, 0x2064
     680:	53 ff       	sbrs	r21, 3
     682:	03 c0       	rjmp	.+6      	; 0x68a <DoStartupTest+0x2c2>
		{
			outputByteMiddle&=~Om_PUSHBUTTON_LAMP_1;		
     684:	2e 7f       	andi	r18, 0xFE	; 254
     686:	20 93 55 20 	sts	0x2055, r18
		}

		// Clear flight indicators
		outputByteHigh=0;
     68a:	10 92 56 20 	sts	0x2056, r1
		outputByteMiddle&=~(Om_FLIGHT_IND_5|Om_FLIGHT_IND_6|Om_FLIGHT_IND_7|Om_FLIGHT_IND_8|Om_FLIGHT_IND_9);
     68e:	20 91 55 20 	lds	r18, 0x2055
     692:	27 70       	andi	r18, 0x07	; 7
     694:	20 93 55 20 	sts	0x2055, r18
		
		// Clear Red LEDs
		outputByteLow&=~(Om_RED_LED_0|Om_RED_LED_1|Om_RED_LED_2|Om_RED_LED_3);
     698:	30 91 54 20 	lds	r19, 0x2054
     69c:	30 7f       	andi	r19, 0xF0	; 240

		// Put toggle switches directly on red LEDs
		if(keyState&Im_TOGGLE_0)		
     69e:	86 fd       	sbrc	r24, 6
		{
			outputByteLow|=Om_RED_LED_0;
     6a0:	38 60       	ori	r19, 0x08	; 8
     6a2:	30 93 54 20 	sts	0x2054, r19
		}
		if(keyState&Im_TOGGLE_1)		
     6a6:	87 ff       	sbrs	r24, 7
     6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <DoStartupTest+0x2ec>
		{
			outputByteLow|=Om_RED_LED_1;
     6aa:	30 91 54 20 	lds	r19, 0x2054
     6ae:	34 60       	ori	r19, 0x04	; 4
     6b0:	30 93 54 20 	sts	0x2054, r19
		}
		if(keyState&Im_TOGGLE_2)		
     6b4:	90 ff       	sbrs	r25, 0
     6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <DoStartupTest+0x2fa>
		{
			outputByteLow|=Om_RED_LED_2;
     6b8:	30 91 54 20 	lds	r19, 0x2054
     6bc:	32 60       	ori	r19, 0x02	; 2
     6be:	30 93 54 20 	sts	0x2054, r19
		}
		if(keyState&Im_TOGGLE_3)		
     6c2:	91 ff       	sbrs	r25, 1
     6c4:	05 c0       	rjmp	.+10     	; 0x6d0 <DoStartupTest+0x308>
		{
			outputByteLow|=Om_RED_LED_3;
     6c6:	30 91 54 20 	lds	r19, 0x2054
     6ca:	31 60       	ori	r19, 0x01	; 1
     6cc:	30 93 54 20 	sts	0x2054, r19
		}

		// Triggers to flight indicators

		if(keyState&Im_R_MAIN_TRIG)
     6d0:	80 ff       	sbrs	r24, 0
     6d2:	03 c0       	rjmp	.+6      	; 0x6da <DoStartupTest+0x312>
		{
			outputByteHigh|=Om_FLIGHT_IND_0;
     6d4:	30 e1       	ldi	r19, 0x10	; 16
     6d6:	30 93 56 20 	sts	0x2056, r19
		}
		if(keyState&Im_R_THUMB_TRIG)
     6da:	81 ff       	sbrs	r24, 1
     6dc:	05 c0       	rjmp	.+10     	; 0x6e8 <DoStartupTest+0x320>
		{
			outputByteHigh|=Om_FLIGHT_IND_1;
     6de:	30 91 56 20 	lds	r19, 0x2056
     6e2:	38 60       	ori	r19, 0x08	; 8
     6e4:	30 93 56 20 	sts	0x2056, r19
		}
		if(keyState&Im_R_GRIP_TRIG)
     6e8:	82 ff       	sbrs	r24, 2
     6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <DoStartupTest+0x32e>
		{
			outputByteHigh|=Om_FLIGHT_IND_2;
     6ec:	30 91 56 20 	lds	r19, 0x2056
     6f0:	34 60       	ori	r19, 0x04	; 4
     6f2:	30 93 56 20 	sts	0x2056, r19
		}
		if(keyState&Im_L_MAIN_TRIG)
     6f6:	83 ff       	sbrs	r24, 3
     6f8:	05 c0       	rjmp	.+10     	; 0x704 <DoStartupTest+0x33c>
		{
			outputByteHigh|=Om_FLIGHT_IND_3;
     6fa:	30 91 56 20 	lds	r19, 0x2056
     6fe:	32 60       	ori	r19, 0x02	; 2
     700:	30 93 56 20 	sts	0x2056, r19
		}
		if(keyState&Im_L_THUMB_TRIG)
     704:	84 ff       	sbrs	r24, 4
     706:	05 c0       	rjmp	.+10     	; 0x712 <DoStartupTest+0x34a>
		{
			outputByteHigh|=Om_FLIGHT_IND_4;
     708:	30 91 56 20 	lds	r19, 0x2056
     70c:	31 60       	ori	r19, 0x01	; 1
     70e:	30 93 56 20 	sts	0x2056, r19
		}
		if(keyState&Im_L_GRIP_TRIG)
     712:	85 ff       	sbrs	r24, 5
     714:	03 c0       	rjmp	.+6      	; 0x71c <DoStartupTest+0x354>
		{
			outputByteMiddle|=Om_FLIGHT_IND_5;
     716:	20 68       	ori	r18, 0x80	; 128
     718:	20 93 55 20 	sts	0x2055, r18
		}

		// Analog to flight indicators

		if(newAdcResult[ADC_YOKE_PITCH]==true)
     71c:	20 91 5d 20 	lds	r18, 0x205D
     720:	21 30       	cpi	r18, 0x01	; 1
     722:	59 f4       	brne	.+22     	; 0x73a <DoStartupTest+0x372>
		{
			analogPitch=(unsigned char)(adcResults[ADC_YOKE_PITCH]/8);		// Get back to 8 bits
     724:	20 91 5f 20 	lds	r18, 0x205F
     728:	30 91 60 20 	lds	r19, 0x2060
     72c:	53 e0       	ldi	r21, 0x03	; 3
     72e:	36 95       	lsr	r19
     730:	27 95       	ror	r18
     732:	5a 95       	dec	r21
     734:	e1 f7       	brne	.-8      	; 0x72e <DoStartupTest+0x366>
     736:	20 93 52 20 	sts	0x2052, r18
		}
		if(newAdcResult[ADC_YOKE_ROLL]==true)
     73a:	20 91 5e 20 	lds	r18, 0x205E
     73e:	21 30       	cpi	r18, 0x01	; 1
     740:	59 f4       	brne	.+22     	; 0x758 <DoStartupTest+0x390>
		{
			analogRoll=(unsigned char)(adcResults[ADC_YOKE_ROLL]/8);		// Get back to 8 bits
     742:	20 91 61 20 	lds	r18, 0x2061
     746:	30 91 62 20 	lds	r19, 0x2062
     74a:	43 e0       	ldi	r20, 0x03	; 3
     74c:	36 95       	lsr	r19
     74e:	27 95       	ror	r18
     750:	4a 95       	dec	r20
     752:	e1 f7       	brne	.-8      	; 0x74c <DoStartupTest+0x384>
     754:	20 93 53 20 	sts	0x2053, r18
		}

		if(analogPitch<70)
     758:	20 91 52 20 	lds	r18, 0x2052
     75c:	26 34       	cpi	r18, 0x46	; 70
     75e:	20 f4       	brcc	.+8      	; 0x768 <DoStartupTest+0x3a0>
		{
			outputByteMiddle|=Om_FLIGHT_IND_6;
     760:	20 91 55 20 	lds	r18, 0x2055
     764:	20 64       	ori	r18, 0x40	; 64
     766:	05 c0       	rjmp	.+10     	; 0x772 <DoStartupTest+0x3aa>
		}
		if(analogPitch>140)
     768:	2d 38       	cpi	r18, 0x8D	; 141
     76a:	28 f0       	brcs	.+10     	; 0x776 <DoStartupTest+0x3ae>
		{
			outputByteMiddle|=Om_FLIGHT_IND_7;
     76c:	20 91 55 20 	lds	r18, 0x2055
     770:	20 62       	ori	r18, 0x20	; 32
     772:	20 93 55 20 	sts	0x2055, r18
		}
		if(analogRoll<100)
     776:	20 91 53 20 	lds	r18, 0x2053
     77a:	24 36       	cpi	r18, 0x64	; 100
     77c:	20 f4       	brcc	.+8      	; 0x786 <DoStartupTest+0x3be>
		{
			outputByteMiddle|=Om_FLIGHT_IND_8;
     77e:	20 91 55 20 	lds	r18, 0x2055
     782:	20 61       	ori	r18, 0x10	; 16
     784:	05 c0       	rjmp	.+10     	; 0x790 <DoStartupTest+0x3c8>
		}
		if(analogRoll>130)
     786:	23 38       	cpi	r18, 0x83	; 131
     788:	28 f0       	brcs	.+10     	; 0x794 <DoStartupTest+0x3cc>
		{
			outputByteMiddle|=Om_FLIGHT_IND_9;
     78a:	20 91 55 20 	lds	r18, 0x2055
     78e:	28 60       	ori	r18, 0x08	; 8
     790:	20 93 55 20 	sts	0x2055, r18
		}

		// Sound of the police
		if(keyState&Im_COIN)
     794:	94 ff       	sbrs	r25, 4
     796:	0a c0       	rjmp	.+20     	; 0x7ac <DoStartupTest+0x3e4>
		{
			SetTimer(TIMER_3,(SECOND));
     798:	68 eb       	ldi	r22, 0xB8	; 184
     79a:	7b e0       	ldi	r23, 0x0B	; 11
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	0e 94 d6 05 	call	0xbac	; 0xbac <SetTimer>
			outputByteMiddle|=Om_AIR_HORN;
     7a2:	80 91 55 20 	lds	r24, 0x2055
     7a6:	84 60       	ori	r24, 0x04	; 4
     7a8:	80 93 55 20 	sts	0x2055, r24
		}

		if(CheckTimer(TIMER_3))
     7ac:	82 e0       	ldi	r24, 0x02	; 2
     7ae:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <CheckTimer>
     7b2:	88 23       	and	r24, r24
     7b4:	29 f0       	breq	.+10     	; 0x7c0 <DoStartupTest+0x3f8>
		{
			outputByteMiddle&=~Om_AIR_HORN;			
     7b6:	80 91 55 20 	lds	r24, 0x2055
     7ba:	8b 7f       	andi	r24, 0xFB	; 251
     7bc:	80 93 55 20 	sts	0x2055, r24
		}

		// Test button resets chases
		if(keyState&Im_TEST)
     7c0:	80 91 67 20 	lds	r24, 0x2067
     7c4:	90 91 68 20 	lds	r25, 0x2068
     7c8:	95 fd       	sbrc	r25, 5
		{
			subState=SS_0;
     7ca:	10 92 d3 20 	sts	0x20D3, r1
		}

		if((lastOutputByteHigh!=outputByteHigh)||(lastOutputByteMiddle!=outputByteMiddle)||(lastOutputByteLow!=outputByteLow))		// Update outputs if anything changed this time around.
     7ce:	90 91 4f 20 	lds	r25, 0x204F
     7d2:	80 91 56 20 	lds	r24, 0x2056
     7d6:	98 13       	cpse	r25, r24
     7d8:	0b c0       	rjmp	.+22     	; 0x7f0 <DoStartupTest+0x428>
     7da:	90 91 4e 20 	lds	r25, 0x204E
     7de:	80 91 55 20 	lds	r24, 0x2055
     7e2:	98 13       	cpse	r25, r24
     7e4:	05 c0       	rjmp	.+10     	; 0x7f0 <DoStartupTest+0x428>
     7e6:	90 91 4d 20 	lds	r25, 0x204D
     7ea:	80 91 54 20 	lds	r24, 0x2054
     7ee:	98 13       	cpse	r25, r24
		{
			SetOutputs();
     7f0:	0e 94 32 01 	call	0x264	; 0x264 <SetOutputs>
	unsigned char
		sreg;
	bool
		retVal;

	sreg=SREG;
     7f4:	9f b7       	in	r25, 0x3f	; 63
	cli();
     7f6:	f8 94       	cli

	retVal=false;
	if(bytesInRxFifo)	// Got anything in fifo?
     7f8:	80 91 69 20 	lds	r24, 0x2069
	{
		retVal=true;
	}

	SREG=sreg;
     7fc:	9f bf       	out	0x3f, r25	; 63
		{
			SetOutputs();
		}
	}

	if(RxFifoNotEmpty())		// Once the game takes control, stop messing with outputs.
     7fe:	88 23       	and	r24, r24
     800:	81 f0       	breq	.+32     	; 0x822 <DoStartupTest+0x45a>
	{
		outputByteHigh=0;
     802:	10 92 56 20 	sts	0x2056, r1
		outputByteMiddle=0;
     806:	10 92 55 20 	sts	0x2055, r1
		outputByteLow=0;
     80a:	10 92 54 20 	sts	0x2054, r1
		SetOutputs();
     80e:	0e 94 32 01 	call	0x264	; 0x264 <SetOutputs>
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------

void SetState(STATE_FUNC *newState)		// Sets the device to a new state, assumes it should begin at the first minor sub-state.
{
	State=newState;
     812:	80 e9       	ldi	r24, 0x90	; 144
     814:	94 e0       	ldi	r25, 0x04	; 4
     816:	80 93 d4 20 	sts	0x20D4, r24
     81a:	90 93 d5 20 	sts	0x20D5, r25
	subState=SS_0;
     81e:	10 92 d3 20 	sts	0x20D3, r1
		outputByteMiddle=0;
		outputByteLow=0;
		SetOutputs();
		SetState(DoUpdateIo);
	}
}
     822:	cf 91       	pop	r28
     824:	08 95       	ret

00000826 <SetState>:
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------

void SetState(STATE_FUNC *newState)		// Sets the device to a new state, assumes it should begin at the first minor sub-state.
{
	State=newState;
     826:	80 93 d4 20 	sts	0x20D4, r24
     82a:	90 93 d5 20 	sts	0x20D5, r25
	subState=SS_0;
     82e:	10 92 d3 20 	sts	0x20D3, r1
     832:	08 95       	ret

00000834 <__vector_default>:
// --------------------------
// Error Recovery:
// --------------------------

ISR(__vector_default)
{
     834:	1f 92       	push	r1
     836:	0f 92       	push	r0
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	0f 92       	push	r0
     83c:	11 24       	eor	r1, r1
	//	printf("Buggy Interrupt Generated!  Flags = ");
	//  printf("*****put interrupt register values here****");

	// Hang, or reset part, or whatever

	asm("jmp 0000");			// head to normal reset vector, should never happen
     83e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
}
     842:	0f 90       	pop	r0
     844:	0f be       	out	0x3f, r0	; 63
     846:	0f 90       	pop	r0
     848:	1f 90       	pop	r1
     84a:	18 95       	reti

0000084c <__vector_47>:
// Periodic Interrupt Request
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------

ISR(TCE0_OVF_vect)
{
     84c:	1f 92       	push	r1
     84e:	0f 92       	push	r0
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	0f 92       	push	r0
     854:	11 24       	eor	r1, r1
     856:	8f 93       	push	r24
     858:	9f 93       	push	r25
	systemTicks++;					// Increment the system ticks.
     85a:	80 91 d6 20 	lds	r24, 0x20D6
     85e:	90 91 d7 20 	lds	r25, 0x20D7
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	80 93 d6 20 	sts	0x20D6, r24
     868:	90 93 d7 20 	sts	0x20D7, r25
}
     86c:	9f 91       	pop	r25
     86e:	8f 91       	pop	r24
     870:	0f 90       	pop	r0
     872:	0f be       	out	0x3f, r0	; 63
     874:	0f 90       	pop	r0
     876:	1f 90       	pop	r1
     878:	18 95       	reti

0000087a <__vector_119>:
	dump,				// Keep me volatile
	bytesInRxFifo;

ISR(USARTF0_RXC_vect)
// When we receive a byte via serial, stick it in the FIFO.
{
     87a:	1f 92       	push	r1
     87c:	0f 92       	push	r0
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	0f 92       	push	r0
     882:	11 24       	eor	r1, r1
     884:	0b b6       	in	r0, 0x3b	; 59
     886:	0f 92       	push	r0
     888:	8f 93       	push	r24
     88a:	ef 93       	push	r30
     88c:	ff 93       	push	r31
	if(bytesInRxFifo<MAX_RX_FIFO_BYTES)
     88e:	80 91 69 20 	lds	r24, 0x2069
     892:	80 34       	cpi	r24, 0x40	; 64
     894:	c8 f4       	brcc	.+50     	; 0x8c8 <__vector_119+0x4e>
	{
		rxFifo[fifoWritePointer]=SERIAL_USART.DATA;	// Put data in fifo at current write pointer
     896:	e0 91 6b 20 	lds	r30, 0x206B
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	80 91 a0 0b 	lds	r24, 0x0BA0
     8a0:	e3 59       	subi	r30, 0x93	; 147
     8a2:	ff 4d       	sbci	r31, 0xDF	; 223
     8a4:	80 83       	st	Z, r24
		fifoWritePointer++;							// Move write pointer forward
     8a6:	80 91 6b 20 	lds	r24, 0x206B
     8aa:	8f 5f       	subi	r24, 0xFF	; 255
     8ac:	80 93 6b 20 	sts	0x206B, r24
		if(fifoWritePointer>=MAX_RX_FIFO_BYTES)		// Roll write pointer around end of ring buffer if needed
     8b0:	80 91 6b 20 	lds	r24, 0x206B
     8b4:	80 34       	cpi	r24, 0x40	; 64
     8b6:	10 f0       	brcs	.+4      	; 0x8bc <__vector_119+0x42>
		{
			fifoWritePointer=0;
     8b8:	10 92 6b 20 	sts	0x206B, r1
		}
		bytesInRxFifo++;							// One more byte in the fifo
     8bc:	80 91 69 20 	lds	r24, 0x2069
     8c0:	8f 5f       	subi	r24, 0xFF	; 255
     8c2:	80 93 69 20 	sts	0x2069, r24
     8c6:	04 c0       	rjmp	.+8      	; 0x8d0 <__vector_119+0x56>
	}
	else
	{
		dump=SERIAL_USART.DATA;		// For whatever reason, writing a one to the flag here doesn't seem to work.  But this does.
     8c8:	80 91 a0 0b 	lds	r24, 0x0BA0
     8cc:	80 93 6a 20 	sts	0x206A, r24
	}
}
     8d0:	ff 91       	pop	r31
     8d2:	ef 91       	pop	r30
     8d4:	8f 91       	pop	r24
     8d6:	0f 90       	pop	r0
     8d8:	0b be       	out	0x3b, r0	; 59
     8da:	0f 90       	pop	r0
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	0f 90       	pop	r0
     8e0:	1f 90       	pop	r1
     8e2:	18 95       	reti

000008e4 <GetByteFromRxFifo>:
{
	unsigned char
		sreg,
		theByte;

	sreg=SREG;
     8e4:	2f b7       	in	r18, 0x3f	; 63
	cli();
     8e6:	f8 94       	cli

	if(bytesInRxFifo)	// Got anything in fifo?
     8e8:	80 91 69 20 	lds	r24, 0x2069
     8ec:	88 23       	and	r24, r24
     8ee:	b1 f0       	breq	.+44     	; 0x91c <GetByteFromRxFifo+0x38>
	{
		theByte=rxFifo[fifoReadPointer];
     8f0:	e0 91 6c 20 	lds	r30, 0x206C
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	e3 59       	subi	r30, 0x93	; 147
     8f8:	ff 4d       	sbci	r31, 0xDF	; 223
     8fa:	80 81       	ld	r24, Z
		fifoReadPointer++;							// Move pointer forward
     8fc:	90 91 6c 20 	lds	r25, 0x206C
     900:	9f 5f       	subi	r25, 0xFF	; 255
     902:	90 93 6c 20 	sts	0x206C, r25
		if(fifoReadPointer>=MAX_RX_FIFO_BYTES)		// Roll pointer around end of ring buffer if needed
     906:	90 91 6c 20 	lds	r25, 0x206C
     90a:	90 34       	cpi	r25, 0x40	; 64
     90c:	10 f0       	brcs	.+4      	; 0x912 <GetByteFromRxFifo+0x2e>
		{
			fifoReadPointer=0;
     90e:	10 92 6c 20 	sts	0x206C, r1
		}
		bytesInRxFifo--;							// One less byte in the fifo
     912:	90 91 69 20 	lds	r25, 0x2069
     916:	91 50       	subi	r25, 0x01	; 1
     918:	90 93 69 20 	sts	0x2069, r25
		SREG=sreg;
		return(theByte);
	}
	else
	{
		SREG=sreg;
     91c:	2f bf       	out	0x3f, r18	; 63
		return(0);		// Should not happen.  If we call this when there are no bytes in the fifo, return 0
	}
}
     91e:	08 95       	ret

00000920 <DoUpdateIo>:
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------

static void DoUpdateIo(void)
// Keep reading the switches, and update indicators when told
{
     920:	0f 93       	push	r16
     922:	1f 93       	push	r17
     924:	cf 93       	push	r28
     926:	df 93       	push	r29

	// If new ADC reading, put it in the mask
	if(newAdcResult[ADC_YOKE_PITCH]==true)
     928:	80 91 5d 20 	lds	r24, 0x205D
     92c:	81 30       	cpi	r24, 0x01	; 1
     92e:	59 f4       	brne	.+22     	; 0x946 <DoUpdateIo+0x26>
	{
		analogPitch=(unsigned char)(adcResults[ADC_YOKE_PITCH]/8);		// Get back to 8 bits
     930:	80 91 5f 20 	lds	r24, 0x205F
     934:	90 91 60 20 	lds	r25, 0x2060
     938:	33 e0       	ldi	r19, 0x03	; 3
     93a:	96 95       	lsr	r25
     93c:	87 95       	ror	r24
     93e:	3a 95       	dec	r19
     940:	e1 f7       	brne	.-8      	; 0x93a <DoUpdateIo+0x1a>
     942:	80 93 52 20 	sts	0x2052, r24
	}
	if(newAdcResult[ADC_YOKE_ROLL]==true)
     946:	80 91 5e 20 	lds	r24, 0x205E
     94a:	81 30       	cpi	r24, 0x01	; 1
     94c:	59 f4       	brne	.+22     	; 0x964 <DoUpdateIo+0x44>
	{
		analogRoll=(unsigned char)(adcResults[ADC_YOKE_ROLL]/8);		// Get back to 8 bits
     94e:	80 91 61 20 	lds	r24, 0x2061
     952:	90 91 62 20 	lds	r25, 0x2062
     956:	23 e0       	ldi	r18, 0x03	; 3
     958:	96 95       	lsr	r25
     95a:	87 95       	ror	r24
     95c:	2a 95       	dec	r18
     95e:	e1 f7       	brne	.-8      	; 0x958 <DoUpdateIo+0x38>
     960:	80 93 53 20 	sts	0x2053, r24
	bool
		gotMessage;
	
	gotMessage=false;	// No complete message yet

	if(CheckTimer(TIMER_INCOMING_MESSAGE_TIMEOUT))		// If we don't get a byte for some period of time, reset our collection state machine
     964:	84 e0       	ldi	r24, 0x04	; 4
     966:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <CheckTimer>
     96a:	81 11       	cpse	r24, r1
	{
		rxMessageState=0;
     96c:	10 92 4c 20 	sts	0x204C, r1
				rxMessageState=3;
				break;
			case 3:
				outputByteLow=byte;
				rxMessageState=0;
				gotMessage=true;
     970:	c0 e0       	ldi	r28, 0x00	; 0
					rxMessageState=1;
				}
				break;
			case 1:
				outputByteHigh=byte;
				rxMessageState=2;
     972:	d2 e0       	ldi	r29, 0x02	; 2
		switch(rxMessageState)
		{
			case 0:
				if(byte==0x42)			// Correct poll byte
				{
					rxMessageState=1;
     974:	11 e0       	ldi	r17, 0x01	; 1
				outputByteHigh=byte;
				rxMessageState=2;
				break;
			case 2:
				outputByteMiddle=byte;
				rxMessageState=3;
     976:	03 e0       	ldi	r16, 0x03	; 3
	unsigned char
		sreg;
	bool
		retVal;

	sreg=SREG;
     978:	9f b7       	in	r25, 0x3f	; 63
	cli();
     97a:	f8 94       	cli

	retVal=false;
	if(bytesInRxFifo)	// Got anything in fifo?
     97c:	80 91 69 20 	lds	r24, 0x2069
	{
		retVal=true;
	}

	SREG=sreg;
     980:	9f bf       	out	0x3f, r25	; 63
	if(CheckTimer(TIMER_INCOMING_MESSAGE_TIMEOUT))		// If we don't get a byte for some period of time, reset our collection state machine
	{
		rxMessageState=0;
	}
	
	while((RxFifoNotEmpty())&&(gotMessage==false))	// Loop here handling bytes we've gotten from the cpu until the fifo is empty OR we have a message to send to the program
     982:	88 23       	and	r24, r24
     984:	39 f1       	breq	.+78     	; 0x9d4 <DoUpdateIo+0xb4>
     986:	c1 11       	cpse	r28, r1
     988:	27 c0       	rjmp	.+78     	; 0x9d8 <DoUpdateIo+0xb8>
	{
		SetTimer(TIMER_INCOMING_MESSAGE_TIMEOUT,INCOMING_MESSAGE_TIMEOUT);	// Got new bytes in the fifo, so don't time out.
     98a:	67 e7       	ldi	r22, 0x77	; 119
     98c:	71 e0       	ldi	r23, 0x01	; 1
     98e:	84 e0       	ldi	r24, 0x04	; 4
     990:	0e 94 d6 05 	call	0xbac	; 0xbac <SetTimer>
		byte=GetByteFromRxFifo();											// Inhale it
     994:	0e 94 72 04 	call	0x8e4	; 0x8e4 <GetByteFromRxFifo>
		switch(rxMessageState)
     998:	90 91 4c 20 	lds	r25, 0x204C
     99c:	91 30       	cpi	r25, 0x01	; 1
     99e:	81 f0       	breq	.+32     	; 0x9c0 <DoUpdateIo+0xa0>
     9a0:	50 f0       	brcs	.+20     	; 0x9b6 <DoUpdateIo+0x96>
     9a2:	92 30       	cpi	r25, 0x02	; 2
     9a4:	91 f0       	breq	.+36     	; 0x9ca <DoUpdateIo+0xaa>
     9a6:	93 30       	cpi	r25, 0x03	; 3
     9a8:	39 f7       	brne	.-50     	; 0x978 <DoUpdateIo+0x58>
			case 2:
				outputByteMiddle=byte;
				rxMessageState=3;
				break;
			case 3:
				outputByteLow=byte;
     9aa:	80 93 54 20 	sts	0x2054, r24
				rxMessageState=0;
     9ae:	10 92 4c 20 	sts	0x204C, r1
				gotMessage=true;
     9b2:	c1 e0       	ldi	r28, 0x01	; 1
     9b4:	e1 cf       	rjmp	.-62     	; 0x978 <DoUpdateIo+0x58>
		SetTimer(TIMER_INCOMING_MESSAGE_TIMEOUT,INCOMING_MESSAGE_TIMEOUT);	// Got new bytes in the fifo, so don't time out.
		byte=GetByteFromRxFifo();											// Inhale it
		switch(rxMessageState)
		{
			case 0:
				if(byte==0x42)			// Correct poll byte
     9b6:	82 34       	cpi	r24, 0x42	; 66
     9b8:	f9 f6       	brne	.-66     	; 0x978 <DoUpdateIo+0x58>
				{
					rxMessageState=1;
     9ba:	10 93 4c 20 	sts	0x204C, r17
     9be:	dc cf       	rjmp	.-72     	; 0x978 <DoUpdateIo+0x58>
				}
				break;
			case 1:
				outputByteHigh=byte;
     9c0:	80 93 56 20 	sts	0x2056, r24
				rxMessageState=2;
     9c4:	d0 93 4c 20 	sts	0x204C, r29
     9c8:	d7 cf       	rjmp	.-82     	; 0x978 <DoUpdateIo+0x58>
				break;
			case 2:
				outputByteMiddle=byte;
     9ca:	80 93 55 20 	sts	0x2055, r24
				rxMessageState=3;
     9ce:	00 93 4c 20 	sts	0x204C, r16
     9d2:	d2 cf       	rjmp	.-92     	; 0x978 <DoUpdateIo+0x58>
				gotMessage=true;
				break;
		}
	}

	if(gotMessage)
     9d4:	cc 23       	and	r28, r28
     9d6:	11 f1       	breq	.+68     	; 0xa1c <DoUpdateIo+0xfc>
//	if(CheckTimer(TIMER_1))
	{
		SetOutputs();
     9d8:	0e 94 32 01 	call	0x264	; 0x264 <SetOutputs>

		// Now send out our reply

		if(txBytesToSend==0)				// Are we done sending the last message to the host?
     9dc:	80 91 ad 20 	lds	r24, 0x20AD
     9e0:	81 11       	cpse	r24, r1
     9e2:	1c c0       	rjmp	.+56     	; 0xa1c <DoUpdateIo+0xfc>
		{
			txBuffer[0]=0x41;
     9e4:	81 e4       	ldi	r24, 0x41	; 65
     9e6:	80 93 af 20 	sts	0x20AF, r24
			txBuffer[1]=(unsigned char)((keyState>>8)&0xFF);
     9ea:	80 91 67 20 	lds	r24, 0x2067
     9ee:	90 91 68 20 	lds	r25, 0x2068
     9f2:	90 93 b0 20 	sts	0x20B0, r25
			txBuffer[2]=(unsigned char)(keyState&0xFF);
     9f6:	80 93 b1 20 	sts	0x20B1, r24
			txBuffer[3]=0;
     9fa:	10 92 b2 20 	sts	0x20B2, r1
			txBuffer[4]=0;
     9fe:	10 92 b3 20 	sts	0x20B3, r1
			txBuffer[5]=analogRoll;
     a02:	80 91 53 20 	lds	r24, 0x2053
     a06:	80 93 b4 20 	sts	0x20B4, r24
			txBuffer[6]=analogPitch;
     a0a:	80 91 52 20 	lds	r24, 0x2052
     a0e:	80 93 b5 20 	sts	0x20B5, r24
				
			txBytesToSend=7;
     a12:	87 e0       	ldi	r24, 0x07	; 7
     a14:	80 93 ad 20 	sts	0x20AD, r24
			txBufferIndex=0;
     a18:	10 92 ae 20 	sts	0x20AE, r1
	{
		analogRoll=(unsigned char)(adcResults[ADC_YOKE_ROLL]/8);		// Get back to 8 bits
	}

	UpdateIncomingSerial();		// If we get a full message from the PC, do what it says and send a reply
	if(txBytesToSend)
     a1c:	80 91 ad 20 	lds	r24, 0x20AD
     a20:	88 23       	and	r24, r24
     a22:	c9 f0       	breq	.+50     	; 0xa56 <DoUpdateIo+0x136>
}

static void UpdateOutgoingSerial(void)
// Keep bytes going out to the host if necessary
{
	if(txBytesToSend)	// Anything to go out?
     a24:	80 91 ad 20 	lds	r24, 0x20AD
     a28:	88 23       	and	r24, r24
     a2a:	a9 f0       	breq	.+42     	; 0xa56 <DoUpdateIo+0x136>
	{
		if(UartTxBufferReady())		// Room in the Uart TX fifo?
     a2c:	0e 94 3a 05 	call	0xa74	; 0xa74 <UartTxBufferReady>
     a30:	88 23       	and	r24, r24
     a32:	89 f0       	breq	.+34     	; 0xa56 <DoUpdateIo+0x136>
		{
			UartSendByte(txBuffer[txBufferIndex++]);
     a34:	e0 91 ae 20 	lds	r30, 0x20AE
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	8e 0f       	add	r24, r30
     a3c:	80 93 ae 20 	sts	0x20AE, r24
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	e1 55       	subi	r30, 0x51	; 81
     a44:	ff 4d       	sbci	r31, 0xDF	; 223
     a46:	80 81       	ld	r24, Z
     a48:	0e 94 40 05 	call	0xa80	; 0xa80 <UartSendByte>
			txBytesToSend--;
     a4c:	80 91 ad 20 	lds	r24, 0x20AD
     a50:	81 50       	subi	r24, 0x01	; 1
     a52:	80 93 ad 20 	sts	0x20AD, r24
	UpdateIncomingSerial();		// If we get a full message from the PC, do what it says and send a reply
	if(txBytesToSend)
	{
		UpdateOutgoingSerial();
	}
}
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	08 95       	ret

00000a60 <__vector_64>:
static unsigned char
	analogRoll,
	analogPitch;

ISR(PORTD_INT0_vect)	
{
     a60:	1f 92       	push	r1
     a62:	0f 92       	push	r0
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	0f 92       	push	r0
     a68:	11 24       	eor	r1, r1
}
     a6a:	0f 90       	pop	r0
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	0f 90       	pop	r0
     a70:	1f 90       	pop	r1
     a72:	18 95       	reti

00000a74 <UartTxBufferReady>:

#define		USART		USARTF0

bool UartTxBufferReady(void)
{
	if(USART.STATUS&USART_DREIF_bm)		// Room in the transmit buffer? (bit is 1 when there's room)
     a74:	80 91 a1 0b 	lds	r24, 0x0BA1
	{
		return(true);
	}
	return(false);
}
     a78:	85 fb       	bst	r24, 5
     a7a:	88 27       	eor	r24, r24
     a7c:	80 f9       	bld	r24, 0
     a7e:	08 95       	ret

00000a80 <UartSendByte>:

void UartSendByte(unsigned char byte)
// Waits (forever if necessary) until the the send buffer is ready, then sends a byte out over the UART.
// NOTE -- this doesn't check whether the output shift register is still clocking out data (ie, whether transmission is complete) just whether the buffer is ready to get a new byte to transmit.
{
	while(!(USART.STATUS&USART_DREIF_bm))		// Hang here until there is room in the transmit buffer (bit is 1 when there's room)
     a80:	90 91 a1 0b 	lds	r25, 0x0BA1
     a84:	95 ff       	sbrs	r25, 5
     a86:	fc cf       	rjmp	.-8      	; 0xa80 <UartSendByte>
		;
	USART.DATA=byte;							// Load the TX buffer.  The byte will clock out automagically.
     a88:	80 93 a0 0b 	sts	0x0BA0, r24
     a8c:	08 95       	ret

00000a8e <UartGetByte>:
}

unsigned char UartGetByte()
// Gets the first byte in the UART's receive buffer.
{
	return(USART.DATA);		// Get one byte back from the receive buffer.  Note that there may be (one) more in the FIFO.
     a8e:	80 91 a0 0b 	lds	r24, 0x0BA0
}
     a92:	08 95       	ret

00000a94 <UartGotByte>:

bool UartGotByte()
// Returns true when there is unread data in the UART's receive buffer.
{
	if(USART.STATUS&USART_RXCIF_bm)		// Flag is set when there are unread data in the buffer
     a94:	80 91 a1 0b 	lds	r24, 0x0BA1
	{
		return(true);
	}
	return(false);
}
     a98:	88 1f       	adc	r24, r24
     a9a:	88 27       	eor	r24, r24
     a9c:	88 1f       	adc	r24, r24
     a9e:	08 95       	ret

00000aa0 <UartWaitForByte>:

void UartWaitForByte()
// Hang out here (maybe forever) until we get a byte.
{
	while(!UartGotByte())				// If there's not new data in the buffer, wait here until there is.
     aa0:	0e 94 4a 05 	call	0xa94	; 0xa94 <UartGotByte>
     aa4:	88 23       	and	r24, r24
     aa6:	e1 f3       	breq	.-8      	; 0xaa0 <UartWaitForByte>
		;
}
     aa8:	08 95       	ret

00000aaa <UartFlushBuffer>:

void UartFlushBuffer()
// Empties the serial buffer.
{
	while(UartGotByte())
     aaa:	0e 94 4a 05 	call	0xa94	; 0xa94 <UartGotByte>
     aae:	88 23       	and	r24, r24
     ab0:	19 f0       	breq	.+6      	; 0xab8 <UartFlushBuffer+0xe>
}

unsigned char UartGetByte()
// Gets the first byte in the UART's receive buffer.
{
	return(USART.DATA);		// Get one byte back from the receive buffer.  Note that there may be (one) more in the FIFO.
     ab2:	80 91 a0 0b 	lds	r24, 0x0BA0
     ab6:	f9 cf       	rjmp	.-14     	; 0xaaa <UartFlushBuffer>
{
	while(UartGotByte())
	{
		UartGetByte();
	}
}
     ab8:	08 95       	ret

00000aba <UnInitUart>:

void UnInitUart()
// Undo what InitUart did.
{
	USART.CTRLB=0;		// Disable transmitter and receiver
     aba:	10 92 a4 0b 	sts	0x0BA4, r1
     abe:	08 95       	ret

00000ac0 <InitUart>:
// This UART setup is for 38400 baud, 8 data bits, one stop bit, no parity, no flow control.
// Interrupts are disabled.
{
	// Port specific stuff:

	PR.PRPF&=~PR_USART0_bm;	// USART0 power on for this port
     ac0:	e0 e7       	ldi	r30, 0x70	; 112
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	86 81       	ldd	r24, Z+6	; 0x06
     ac6:	8f 7e       	andi	r24, 0xEF	; 239
     ac8:	86 83       	std	Z+6, r24	; 0x06

	PORTF.OUTSET=PIN3_bm;
     aca:	e0 ea       	ldi	r30, 0xA0	; 160
     acc:	f6 e0       	ldi	r31, 0x06	; 6
     ace:	88 e0       	ldi	r24, 0x08	; 8
     ad0:	85 83       	std	Z+5, r24	; 0x05
	PORTF.DIRSET=PIN3_bm;	// PF3 (TXD0) as output driving high
     ad2:	81 83       	std	Z+1, r24	; 0x01

	PORTF.DIRCLR=PIN2_bm;	// PF2 (RXD0) as input
     ad4:	84 e0       	ldi	r24, 0x04	; 4
     ad6:	82 83       	std	Z+2, r24	; 0x02
	USART.CTRLB=0;			// Tx / Rx off for now, normal rate
     ad8:	e0 ea       	ldi	r30, 0xA0	; 160
     ada:	fb e0       	ldi	r31, 0x0B	; 11
     adc:	14 82       	std	Z+4, r1	; 0x04
	USART.BAUDCTRLB=0;			// No bscale (no fractional rate)
	USART.BAUDCTRLA=25;			// 38,400 at 16MHz per clock (see above)
	#warning "Uart assuming 16Mhz F_CPU..."
	#elif F_CPU==20000000UL
	// 20MHz peripheral clock, double speed, 38.4kbaud: BSEL=64.10 (bscale=0) error == 0.16%
	USART.BAUDCTRLB=0;			// No bscale (no fractional rate)
     ade:	17 82       	std	Z+7, r1	; 0x07
	USART.BAUDCTRLA=64;			// 38,400 at 20MHz per clock (see above)
     ae0:	80 e4       	ldi	r24, 0x40	; 64
     ae2:	86 83       	std	Z+6, r24	; 0x06
	USART.CTRLB|=(USART_CLK2X_bm);	// Set double rate
     ae4:	84 81       	ldd	r24, Z+4	; 0x04
     ae6:	84 60       	ori	r24, 0x04	; 4
     ae8:	84 83       	std	Z+4, r24	; 0x04
	#warning "Uart assuming 20Mhz F_CPU..."
	#else
	#error "Can't generate a baud rate from the current F_CPU."
	#endif

	USART.CTRLA=0;						// No interrupts
     aea:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLC=USART_CHSIZE_8BIT_gc;	// Set 8,N,1
     aec:	83 e0       	ldi	r24, 0x03	; 3
     aee:	85 83       	std	Z+5, r24	; 0x05

	USART.CTRLB|=(USART_RXEN_bm|USART_TXEN_bm);	// Enable transmitter and reciever at normal rate
     af0:	84 81       	ldd	r24, Z+4	; 0x04
     af2:	88 61       	ori	r24, 0x18	; 24
     af4:	84 83       	std	Z+4, r24	; 0x04
	UartFlushBuffer();							// Get rid of any poo poo hanging out in the input buffer.
     af6:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <UartFlushBuffer>

00000afa <SpiTransferComplete>:
// -------------------------

bool SpiTransferComplete(void)
// Returns true if the SPI transfer interrupt complete flag is SET
{
	if(SPID.STATUS&SPI_IF_bm)
     afa:	80 91 c2 09 	lds	r24, 0x09C2
	{
		return(true);
	}
	return(false);
}
     afe:	88 1f       	adc	r24, r24
     b00:	88 27       	eor	r24, r24
     b02:	88 1f       	adc	r24, r24
     b04:	08 95       	ret

00000b06 <TransferSpiByte>:
unsigned char TransferSpiByte(unsigned char theByte)
// Loads a byte into the SPI transmit shift register, waits until the transfer is complete, and then returns the byte it's gotten from the slave.
// Checks to make sure the transmitter is ready first.
{

	SPID.DATA=theByte;				// Load the xmit buffer and start the transfer.
     b06:	80 93 c3 09 	sts	0x09C3, r24

	while(!(SPID.STATUS&SPI_IF_bm))	// Spin until the transfer is complete
     b0a:	80 91 c2 09 	lds	r24, 0x09C2
     b0e:	87 ff       	sbrs	r24, 7
     b10:	fc cf       	rjmp	.-8      	; 0xb0a <TransferSpiByte+0x4>
		;
	return(SPID.DATA);
     b12:	80 91 c3 09 	lds	r24, 0x09C3
}
     b16:	08 95       	ret

00000b18 <DoBusyWait>:

void DoBusyWait(volatile unsigned int loops)
// Pull ~10 operations per loop plus overhead (probably more like 15)
{
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	00 d0       	rcall	.+0      	; 0xb1e <DoBusyWait+0x6>
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
     b22:	89 83       	std	Y+1, r24	; 0x01
     b24:	9a 83       	std	Y+2, r25	; 0x02
	while(loops--)
     b26:	89 81       	ldd	r24, Y+1	; 0x01
     b28:	9a 81       	ldd	r25, Y+2	; 0x02
     b2a:	9c 01       	movw	r18, r24
     b2c:	21 50       	subi	r18, 0x01	; 1
     b2e:	31 09       	sbc	r19, r1
     b30:	29 83       	std	Y+1, r18	; 0x01
     b32:	3a 83       	std	Y+2, r19	; 0x02
     b34:	89 2b       	or	r24, r25
     b36:	59 f0       	breq	.+22     	; 0xb4e <DoBusyWait+0x36>
	...
	{
		MACRO_DoTenNops;
     b4c:	ec cf       	rjmp	.-40     	; 0xb26 <DoBusyWait+0xe>
	}
}
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	08 95       	ret

00000b58 <InitSpi>:


void InitSpi(void)
{
	PORTD.OUTCLR=0xF0;		// All lines low to start
     b58:	e0 e6       	ldi	r30, 0x60	; 96
     b5a:	f6 e0       	ldi	r31, 0x06	; 6
     b5c:	80 ef       	ldi	r24, 0xF0	; 240
     b5e:	86 83       	std	Z+6, r24	; 0x06
	PORTD.DIRSET=0xB0;		// SCK, MOSI, SS to output
     b60:	80 eb       	ldi	r24, 0xB0	; 176
     b62:	81 83       	std	Z+1, r24	; 0x01
	
	PORTD.DIRCLR=(1<<6);	// MISO to input
     b64:	80 e4       	ldi	r24, 0x40	; 64
     b66:	82 83       	std	Z+2, r24	; 0x02
	
	PR.PRPD&=~PR_SPI_bm;				// Turn SPI module on (on port D)
     b68:	a0 e7       	ldi	r26, 0x70	; 112
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	14 96       	adiw	r26, 0x04	; 4
     b6e:	8c 91       	ld	r24, X
     b70:	14 97       	sbiw	r26, 0x04	; 4
     b72:	87 7f       	andi	r24, 0xF7	; 247
     b74:	14 96       	adiw	r26, 0x04	; 4
     b76:	8c 93       	st	X, r24
	PORTD.PIN6CTRL=PORT_OPC_PULLUP_gc;	// Pull up inputs so they don't flop around
     b78:	88 e1       	ldi	r24, 0x18	; 24
     b7a:	86 8b       	std	Z+22, r24	; 0x16

	PORTD.OUTSET=0x10;		// PD4 high (chip select)
     b7c:	80 e1       	ldi	r24, 0x10	; 16
     b7e:	85 83       	std	Z+5, r24	; 0x05

	SPID.INTCTRL=0;											// No interrupts
     b80:	e0 ec       	ldi	r30, 0xC0	; 192
     b82:	f9 e0       	ldi	r31, 0x09	; 9
     b84:	11 82       	std	Z+1, r1	; 0x01
//	SPID.CTRL=SPI_CLK2X_bm|SPI_ENABLE_bm|SPI_MASTER_bm|SPI_PRESCALER_DIV16_gc|SPI_MODE_3_gc;	// Enable SPI, Master, clk/8, MSb first, SPI mode 3
//	SPID.CTRL=SPI_CLK2X_bm|SPI_ENABLE_bm|SPI_MASTER_bm|SPI_PRESCALER_DIV4_gc|SPI_MODE_3_gc;	// Enable SPI, Master, clk/2, MSb first, SPI mode 3

//	SPID.CTRL=SPI_ENABLE_bm|SPI_MASTER_bm|SPI_PRESCALER_DIV16_gc|SPI_MODE_0_gc;	// Enable SPI, Master, clk/16, MSb first, SPI mode 0

	SPID.CTRL=SPI_ENABLE_bm|SPI_DORD_bm|SPI_MASTER_bm|SPI_PRESCALER_DIV64_gc|SPI_MODE_3_gc;	// Enable SPI, LSb first, Master, clk/64, SPI mode 3
     b86:	8e e7       	ldi	r24, 0x7E	; 126
     b88:	80 83       	st	Z, r24
     b8a:	08 95       	ret

00000b8c <ResetTimer>:
// Starts a given timer counting again from the time this function is called (resets the entryTime) using the last value of ticksToWait passed to that timer.
{
	unsigned char 
		sreg;

	sreg=SREG;	// Keep operations atomic -- ISR changes systemTicks.
     b8c:	9f b7       	in	r25, 0x3f	; 63
	cli();
     b8e:	f8 94       	cli
	entryTime[timerNum]=systemTicks;
     b90:	e8 2f       	mov	r30, r24
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	20 91 d6 20 	lds	r18, 0x20D6
     b98:	30 91 d7 20 	lds	r19, 0x20D7
     b9c:	ee 0f       	add	r30, r30
     b9e:	ff 1f       	adc	r31, r31
     ba0:	e7 53       	subi	r30, 0x37	; 55
     ba2:	ff 4d       	sbci	r31, 0xDF	; 223
     ba4:	20 83       	st	Z, r18
     ba6:	31 83       	std	Z+1, r19	; 0x01
	SREG=sreg;
     ba8:	9f bf       	out	0x3f, r25	; 63
     baa:	08 95       	ret

00000bac <SetTimer>:
// Sets a software timer with an entry time and an amount of time before it expires.
{
	unsigned char 
		sreg;

	sreg=SREG;	// Keep operations atomic -- ISR changes systemTicks.
     bac:	2f b7       	in	r18, 0x3f	; 63
	cli();
     bae:	f8 94       	cli

	entryTime[timerNum]=systemTicks;
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	40 91 d6 20 	lds	r20, 0x20D6
     bb6:	50 91 d7 20 	lds	r21, 0x20D7
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	fc 01       	movw	r30, r24
     bc0:	e7 53       	subi	r30, 0x37	; 55
     bc2:	ff 4d       	sbci	r31, 0xDF	; 223
     bc4:	40 83       	st	Z, r20
     bc6:	51 83       	std	Z+1, r21	; 0x01
	delayTime[timerNum]=ticks_to_wait;
     bc8:	fc 01       	movw	r30, r24
     bca:	e1 54       	subi	r30, 0x41	; 65
     bcc:	ff 4d       	sbci	r31, 0xDF	; 223
     bce:	60 83       	st	Z, r22
     bd0:	71 83       	std	Z+1, r23	; 0x01

	SREG=sreg;
     bd2:	2f bf       	out	0x3f, r18	; 63
     bd4:	08 95       	ret

00000bd6 <CheckTimer>:
// Ie, return true if the time is up, and false if it isn't.
{
	unsigned char 
		sreg;

	sreg=SREG;	// Keep operations atomic -- ISR changes systemTicks.
     bd6:	4f b7       	in	r20, 0x3f	; 63
	cli();
     bd8:	f8 94       	cli
	
	if((systemTicks-entryTime[timerNum])>=delayTime[timerNum])
     bda:	20 91 d6 20 	lds	r18, 0x20D6
     bde:	30 91 d7 20 	lds	r19, 0x20D7
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	fc 01       	movw	r30, r24
     bea:	e7 53       	subi	r30, 0x37	; 55
     bec:	ff 4d       	sbci	r31, 0xDF	; 223
     bee:	01 90       	ld	r0, Z+
     bf0:	f0 81       	ld	r31, Z
     bf2:	e0 2d       	mov	r30, r0
     bf4:	dc 01       	movw	r26, r24
     bf6:	a1 54       	subi	r26, 0x41	; 65
     bf8:	bf 4d       	sbci	r27, 0xDF	; 223
     bfa:	6d 91       	ld	r22, X+
     bfc:	7c 91       	ld	r23, X
     bfe:	c9 01       	movw	r24, r18
     c00:	8e 1b       	sub	r24, r30
     c02:	9f 0b       	sbc	r25, r31
	{
		SREG=sreg;		// Restore interrupt state.
     c04:	4f bf       	out	0x3f, r20	; 63
		sreg;

	sreg=SREG;	// Keep operations atomic -- ISR changes systemTicks.
	cli();
	
	if((systemTicks-entryTime[timerNum])>=delayTime[timerNum])
     c06:	86 17       	cp	r24, r22
     c08:	97 07       	cpc	r25, r23
     c0a:	10 f0       	brcs	.+4      	; 0xc10 <CheckTimer+0x3a>
	{
		SREG=sreg;		// Restore interrupt state.
		return(true);
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	08 95       	ret
	}
	else
	{
		SREG=sreg;		// Restore interrupt state.
		return(false);
     c10:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     c12:	08 95       	ret

00000c14 <ExpireTimer>:

void ExpireTimer(unsigned char timerNum)
// Sets a timer check to return false the next time it is checked.  IE, "runs out" the passed timer.
{
	delayTime[timerNum]=0;		// Zero ticks until we're expired.  
     c14:	e8 2f       	mov	r30, r24
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	ee 0f       	add	r30, r30
     c1a:	ff 1f       	adc	r31, r31
     c1c:	e1 54       	subi	r30, 0x41	; 65
     c1e:	ff 4d       	sbci	r31, 0xDF	; 223
     c20:	10 82       	st	Z, r1
     c22:	11 82       	std	Z+1, r1	; 0x01
     c24:	08 95       	ret

00000c26 <main>:
//-----------------------------------------------------------------------

int main(void)
// Application main loop.
{
	cli();			// No interrupts until we're ready.
     c26:	f8 94       	cli
	outputByteLow=0;

static void InitOutputs(void)
// Turn all output pins to drivers and set them low except damage LEDs, set them high.
{	
	PORTC.OUTCLR=0x38;		// Bits 3, 4, 5
     c28:	88 e3       	ldi	r24, 0x38	; 56
     c2a:	80 93 46 06 	sts	0x0646, r24
	PORTC.DIRSET=0x38;		
     c2e:	80 93 41 06 	sts	0x0641, r24

	PORTD.OUTSET=0xFF;		// Everything off (LEDs, bits inverted)	
     c32:	8f ef       	ldi	r24, 0xFF	; 255
     c34:	80 93 65 06 	sts	0x0665, r24
	PORTD.DIRSET=0xFF;		
     c38:	80 93 61 06 	sts	0x0661, r24

	PORTE.OUTCLR=0xFF;		// Everything off (lamps, not inverted)
     c3c:	80 93 86 06 	sts	0x0686, r24
	PORTE.DIRSET=0xFF;		
     c40:	80 93 81 06 	sts	0x0681, r24

	PORTF.OUTCLR=0x03;		// Bits 0, 1
     c44:	83 e0       	ldi	r24, 0x03	; 3
     c46:	80 93 a6 06 	sts	0x06A6, r24
	PORTF.DIRSET=0x03;		
     c4a:	80 93 a1 06 	sts	0x06A1, r24
	InitOutputs();			// Turn off all outputs
	
	// Xmega parts start running an internal clock at 2MHZ -- we change that in software.
	// This board has a 20MHz silicon oscillator hooked up to the MCU which we use as the CPU clock

	OSC.XOSCCTRL=OSC_XOSCSEL_EXTCLK_gc;				// No crystal oscillator, set up for external clock in (this is really just setting this register to 0 -- this also starts up fast)
     c4e:	10 92 52 00 	sts	0x0052, r1
	OSC.PLLCTRL=(0b00<<OSC_PLLSRC_gp)|(0<<OSC_PLLFAC_gp);	// no PLL
     c52:	10 92 55 00 	sts	0x0055, r1
	OSC.DFLLCTRL=0;						// no calibration
     c56:	10 92 56 00 	sts	0x0056, r1
	OSC.XOSCFAIL=0;						// no failure monitoring
     c5a:	10 92 53 00 	sts	0x0053, r1

	OSC.CTRL=(0<<OSC_PLLEN_bp)|(1<<OSC_XOSCEN_bp)|(0<<OSC_RC32KEN_bp)|(0<<OSC_RC32MEN_bp)|(1<<OSC_RC2MEN_bp);	// turn on external clock, (leave internal 2MHz running)
     c5e:	89 e0       	ldi	r24, 0x09	; 9
     c60:	80 93 50 00 	sts	0x0050, r24

	while(!(OSC.STATUS&(1<<OSC_XOSCRDY_bp)))		// sit here until external clock is alive
     c64:	80 91 51 00 	lds	r24, 0x0051
     c68:	83 ff       	sbrs	r24, 3
     c6a:	fc cf       	rjmp	.-8      	; 0xc64 <main+0x3e>
		;

	CCPWrite(&CLK.PSCTRL,0);						//	No prescaling
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	81 e4       	ldi	r24, 0x41	; 65
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 15 01 	call	0x22a	; 0x22a <CCPWrite>
	CCPWrite(&CLK.CTRL,CLK_SCLKSEL_XOSC_gc);		//	Set ext oscillator as the clock source
     c76:	63 e0       	ldi	r22, 0x03	; 3
     c78:	80 e4       	ldi	r24, 0x40	; 64
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 15 01 	call	0x22a	; 0x22a <CCPWrite>
	CLK.RTCCTRL=CLK_RTCSRC_RCOSC_gc|0;				// select internal 32.748KHz RC, but leave it disabled
     c80:	84 e0       	ldi	r24, 0x04	; 4
     c82:	80 93 43 00 	sts	0x0043, r24

	CCPWrite(&OSC.XOSCFAIL,OSC_XOSCFDEN_bm);		//  Enable failure detection on internal oscillator (reset if it gets real weird)
     c86:	61 e0       	ldi	r22, 0x01	; 1
     c88:	83 e5       	ldi	r24, 0x53	; 83
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 15 01 	call	0x22a	; 0x22a <CCPWrite>
	OSC.CTRL&=~(1<<OSC_RC2MEN_bp);					// turn off 2MHz clock now that we're running from the PLL/external OSC
     c90:	80 91 50 00 	lds	r24, 0x0050
     c94:	8e 7f       	andi	r24, 0xFE	; 254
     c96:	80 93 50 00 	sts	0x0050, r24

//	PR.PRGEN=0x1F;									// Power off AES, EBI, RTC, event system, and DMA
//  @@@ power off that stuff once you're sure you aren't using it.
//  Power off the port peripherals too.

	CCPWrite(&MCU.MCUCR,MCU_JTAGD_bm);				//  Disable JTAG (screws up PORTB)
     c9a:	61 e0       	ldi	r22, 0x01	; 1
     c9c:	86 e9       	ldi	r24, 0x96	; 150
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 15 01 	call	0x22a	; 0x22a <CCPWrite>

	InitUart();
     ca4:	0e 94 60 05 	call	0xac0	; 0xac0 <InitUart>
static void InitSerialFifos(void)
{
	unsigned char
		sreg;

	sreg=SREG;
     ca8:	8f b7       	in	r24, 0x3f	; 63
	cli();
     caa:	f8 94       	cli

	bytesInRxFifo=0;					// Init ring buffer for RS485 byte reception
     cac:	10 92 69 20 	sts	0x2069, r1
	fifoWritePointer=0;
     cb0:	10 92 6b 20 	sts	0x206B, r1
	fifoReadPointer=0;
     cb4:	10 92 6c 20 	sts	0x206C, r1
	txBufferIndex=0;
     cb8:	10 92 ae 20 	sts	0x20AE, r1
	txBytesToSend=0;
     cbc:	10 92 ad 20 	sts	0x20AD, r1
	SERIAL_USART.CTRLA=USART_RXCINTLVL_MED_gc;	// Interrupts enabled, medium priority
     cc0:	90 e2       	ldi	r25, 0x20	; 32
     cc2:	90 93 a3 0b 	sts	0x0BA3, r25

	SREG=sreg;
     cc6:	8f bf       	out	0x3f, r24	; 63
	unsigned char
		i;

	// Init ADC hardware:

	PR.PRPA&=~PR_ADC_bm;									// Make sure ADC is on
     cc8:	80 91 71 00 	lds	r24, 0x0071
     ccc:	8d 7f       	andi	r24, 0xFD	; 253
     cce:	80 93 71 00 	sts	0x0071, r24
	PORTA.DIRCLR=0x0F;										// PORTA analog inputs to inputs
     cd2:	8f e0       	ldi	r24, 0x0F	; 15
     cd4:	80 93 02 06 	sts	0x0602, r24

//	ADCA.CTRLB=ADC_CONVMODE_bm|ADC_RESOLUTION_12BIT_gc;		// Set signed mode, 12 bit right justified, no free run
	ADCA.CTRLB=0x10;										// Same as above, no "convmode" bitmask
     cd8:	80 e1       	ldi	r24, 0x10	; 16
     cda:	80 93 01 02 	sts	0x0201, r24
	ADCA.REFCTRL=ADC_REFSEL_AREFA_gc;						// External reference A, bandgap and temp disabled
     cde:	90 93 02 02 	sts	0x0202, r25
//	ADCA.PRESCALER=ADC_PRESCALER_DIV256_gc;					// 16MHz divided by 256 = 62.5kHz  (see notes)	-- OG, helps with higher impedance sources
//	ADCA.PRESCALER=ADC_PRESCALER_DIV128_gc;					// 16MHz divided by 128 = 125kHz  (see notes)	-- this works pretty well, maybe better than above at low impedance
	ADCA.PRESCALER=ADC_PRESCALER_DIV512_gc;					// See notes	-- real slow for high impedance
     ce2:	c7 e0       	ldi	r28, 0x07	; 7
     ce4:	c0 93 04 02 	sts	0x0204, r28

	ADCA.CH0.CTRL=ADC_CH_INPUTMODE_DIFF_gc;							// Differential input, no gain.
     ce8:	82 e0       	ldi	r24, 0x02	; 2
     cea:	80 93 20 02 	sts	0x0220, r24
	ADCA.CH0.MUXCTRL=ADC_CH_MUXPOS_PIN2_gc|ADC_CH_MUXNEG_PIN3_gc;	// Positive input is PIN2 (PA2), Neg is PA3	(first source we look at)
     cee:	83 e1       	ldi	r24, 0x13	; 19
     cf0:	80 93 21 02 	sts	0x0221, r24
	ADCA.CH0.INTCTRL=0;												// No interrupts
     cf4:	10 92 22 02 	sts	0x0222, r1

	ADCA.CTRLA=ADC_ENABLE_bm;								// Enable the ADC
     cf8:	d1 e0       	ldi	r29, 0x01	; 1
     cfa:	d0 93 00 02 	sts	0x0200, r29

	// Init our application ADC variables:

	adcResultTemp=0;	// Zero our accumulator
     cfe:	10 92 58 20 	sts	0x2058, r1
     d02:	10 92 59 20 	sts	0x2059, r1
     d06:	10 92 5a 20 	sts	0x205A, r1
     d0a:	10 92 5b 20 	sts	0x205B, r1
	adcSampleCount=0;	// Zero oversample/average counter
     d0e:	10 92 57 20 	sts	0x2057, r1

	for(i=0;i<NUM_ADC;i++)	// Zero results
	{
		adcResults[i]=0;
     d12:	10 92 5f 20 	sts	0x205F, r1
     d16:	10 92 60 20 	sts	0x2060, r1
		newAdcResult[i]=false;
     d1a:	10 92 5d 20 	sts	0x205D, r1
	adcResultTemp=0;	// Zero our accumulator
	adcSampleCount=0;	// Zero oversample/average counter

	for(i=0;i<NUM_ADC;i++)	// Zero results
	{
		adcResults[i]=0;
     d1e:	10 92 61 20 	sts	0x2061, r1
     d22:	10 92 62 20 	sts	0x2062, r1
		newAdcResult[i]=false;
     d26:	10 92 5e 20 	sts	0x205E, r1
	}

	currentAdcSource=0;	// Look at the first signal source
     d2a:	10 92 5c 20 	sts	0x205C, r1

	ADCA.CH0.CTRL|=ADC_CH_START_bm; 	// Start conversion on channel 0
     d2e:	80 91 20 02 	lds	r24, 0x0220
     d32:	80 68       	ori	r24, 0x80	; 128
     d34:	80 93 20 02 	sts	0x0220, r24
// PB0-7 are all inputs
// PC0-2 are inputs
// NOTE -- we invert the data coming in from these pins, so a pressed switch is read as a ONE later.
// NOTE -- For PORTB to work right, JTAG gotta go.
{
	PORTA.DIRCLR=0xE0;									// Top three bits
     d38:	80 ee       	ldi	r24, 0xE0	; 224
     d3a:	80 93 02 06 	sts	0x0602, r24
	PORTA.PIN5CTRL=PORT_INVEN_bm|PORT_OPC_PULLUP_gc;	// Set them to be pulled up and inverted
     d3e:	88 e5       	ldi	r24, 0x58	; 88
     d40:	80 93 15 06 	sts	0x0615, r24
	PORTA.PIN6CTRL=PORT_INVEN_bm|PORT_OPC_PULLUP_gc;	// Set them to be pulled up and inverted
     d44:	80 93 16 06 	sts	0x0616, r24
	PORTA.PIN7CTRL=PORT_INVEN_bm|PORT_OPC_PULLUP_gc;	// Set them to be pulled up and inverted
     d48:	80 93 17 06 	sts	0x0617, r24

	PORTB.DIRCLR=0xFF;									// All bits
     d4c:	1f ef       	ldi	r17, 0xFF	; 255
     d4e:	10 93 22 06 	sts	0x0622, r17
	PORTCFG.MPCMASK=0xFF;								// Configure these pins on this port next time we write the config register
     d52:	10 93 b0 00 	sts	0x00B0, r17
	PORTB.PIN0CTRL=PORT_INVEN_bm|PORT_OPC_PULLUP_gc;	// Set them to be pulled up and inverted
     d56:	80 93 30 06 	sts	0x0630, r24

	PORTC.DIRCLR=0x07;									// Bottom three bits
     d5a:	c0 93 42 06 	sts	0x0642, r28
	PORTC.PIN0CTRL=PORT_INVEN_bm|PORT_OPC_PULLUP_gc;	// Set them to be pulled up and inverted
     d5e:	80 93 50 06 	sts	0x0650, r24
	PORTC.PIN1CTRL=PORT_INVEN_bm|PORT_OPC_PULLUP_gc;	// Set them to be pulled up and inverted
     d62:	80 93 51 06 	sts	0x0651, r24
	PORTC.PIN2CTRL=PORT_INVEN_bm|PORT_OPC_PULLUP_gc;	// Set them to be pulled up and inverted
     d66:	80 93 52 06 	sts	0x0652, r24

	keyState=0;		// No keys pressed
     d6a:	10 92 67 20 	sts	0x2067, r1
     d6e:	10 92 68 20 	sts	0x2068, r1
	newKeys=0;		// No keys new
     d72:	10 92 65 20 	sts	0x2065, r1
     d76:	10 92 66 20 	sts	0x2066, r1

	SetTimer(TIMER_DEBOUNCE,(SECOND/64));
     d7a:	6e e2       	ldi	r22, 0x2E	; 46
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	83 e0       	ldi	r24, 0x03	; 3
     d80:	0e 94 d6 05 	call	0xbac	; 0xbac <SetTimer>
static void InitSoftclock(void)
// We're using PORTE's timer 0 for this.
// Look at the value of SECOND define, and set number of periodic interrupt requests per second.
// Affects watchdog, too.
{
	systemTicks=0;
     d84:	10 92 d6 20 	sts	0x20D6, r1
     d88:	10 92 d7 20 	sts	0x20D7, r1

	PR.PRPE&=~PR_TC0_bm;		// Turn on timer counter zero for porte
     d8c:	80 91 75 00 	lds	r24, 0x0075
     d90:	8e 7f       	andi	r24, 0xFE	; 254
     d92:	80 93 75 00 	sts	0x0075, r24

	TCE0.CCA=0;						// Compare match 0
     d96:	10 92 28 0a 	sts	0x0A28, r1
     d9a:	10 92 29 0a 	sts	0x0A29, r1
	TCE0.CNT=0;						// Set Count Value to 0.
     d9e:	10 92 20 0a 	sts	0x0A20, r1
     da2:	10 92 21 0a 	sts	0x0A21, r1
	TCE0.PER=(F_CPU/SECOND);		// Set period for this timer (max count)
     da6:	8a e0       	ldi	r24, 0x0A	; 10
     da8:	9a e1       	ldi	r25, 0x1A	; 26
     daa:	80 93 26 0a 	sts	0x0A26, r24
     dae:	90 93 27 0a 	sts	0x0A27, r25

	TCE0.CTRLB=0;					// No compares/captures enabled, and no waveforms
     db2:	10 92 01 0a 	sts	0x0A01, r1

	TCE0.INTFLAGS=0xFF;						// Clear the interrupt flags
     db6:	10 93 0c 0a 	sts	0x0A0C, r17
//	TCE0.INTCTRLA=TC_OVFINTLVL_HI_gc;		// Set wdt overflow interrupt (high priority)
	TCE0.INTCTRLA=TC_OVFINTLVL_LO_gc;		// Set wdt overflow interrupt (low priority)
     dba:	d0 93 06 0a 	sts	0x0A06, r29
	TCE0.INTCTRLB=0;						// No CC ints
     dbe:	10 92 07 0a 	sts	0x0A07, r1
	TCE0.CTRLA=TC_CLKSEL_DIV1_gc;			// Start the timer with a clock division of 1.
     dc2:	d0 93 00 0a 	sts	0x0A00, r29
	InitSerialFifos();
//	InitSpi();
	InitAdc();
	InitSwitches();
	InitSoftclock();
	fdevopen(UartPutChar, NULL);	// Associate stdout with out putchar routine (enable printf)  --- This is REALLY hoggy.
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	81 e2       	ldi	r24, 0x21	; 33
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	0e 94 da 07 	call	0xfb4	; 0xfb4 <fdevopen>

	PMIC.CTRL=PMIC_HILVLEN_bm|PMIC_MEDLVLEN_bm|PMIC_LOLVLEN_bm;		// Enable all interrupt levels
     dd2:	c0 93 a2 00 	sts	0x00A2, r28
	sei();															// Global interrupt enable
     dd6:	78 94       	sei

	RST.STATUS=0x3F;				// Clear reset cause flags	
     dd8:	8f e3       	ldi	r24, 0x3F	; 63
     dda:	80 93 78 00 	sts	0x0078, r24
	
	printf("\n**People's Glorious VEC9 Cockpit Controller**\nTMB\n%s\n",BUILD_DATE);
     dde:	87 e0       	ldi	r24, 0x07	; 7
     de0:	90 e2       	ldi	r25, 0x20	; 32
     de2:	9f 93       	push	r25
     de4:	8f 93       	push	r24
     de6:	83 e1       	ldi	r24, 0x13	; 19
     de8:	90 e2       	ldi	r25, 0x20	; 32
     dea:	9f 93       	push	r25
     dec:	8f 93       	push	r24
     dee:	0e 94 25 08 	call	0x104a	; 0x104a <printf>
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------

void SetState(STATE_FUNC *newState)		// Sets the device to a new state, assumes it should begin at the first minor sub-state.
{
	State=newState;
     df2:	84 ee       	ldi	r24, 0xE4	; 228
     df4:	91 e0       	ldi	r25, 0x01	; 1
     df6:	80 93 d4 20 	sts	0x20D4, r24
     dfa:	90 93 d5 20 	sts	0x20D5, r25
	subState=SS_0;
     dfe:	10 92 d3 20 	sts	0x20D3, r1
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
			{
				adcResults[currentAdcSource]=(adcResultTemp/SAMPLES_TO_AVERAGE);	// export reading, with averaging
				newAdcResult[currentAdcSource]=true;								// Let program know we have a new ADC reading

				adcSampleCount=0;						// Restart accumulator
				tossCounter=SAMPLES_TO_TOSS;			// Ignore initial samples after switching the mux
     e0a:	14 e0       	ldi	r17, 0x04	; 4
				}

				switch(currentAdcSource)		// Set mux to the next signal source
				{
					case ADC_YOKE_PITCH:											// PA2
					ADCA.CH0.CTRL=ADC_CH_INPUTMODE_DIFF_gc;							// Differential input, no gain.
     e0c:	c2 e0       	ldi	r28, 0x02	; 2
					ADCA.CH0.MUXCTRL=ADC_CH_MUXPOS_PIN2_gc|ADC_CH_MUXNEG_PIN3_gc;	// Positive input is PIN2 (PA2), Neg is PA3
     e0e:	03 e1       	ldi	r16, 0x13	; 19
					break;

					case ADC_YOKE_ROLL:												// PA1
					ADCA.CH0.CTRL=ADC_CH_INPUTMODE_DIFF_gc;							// Differential input, no gain.
					ADCA.CH0.MUXCTRL=ADC_CH_MUXPOS_PIN1_gc|ADC_CH_MUXNEG_PIN3_gc;	// Positive input is PIN1 (PA1), Neg is PA3
     e10:	7b e0       	ldi	r23, 0x0B	; 11
     e12:	f7 2e       	mov	r15, r23
	static unsigned char
		tossCounter=SAMPLES_TO_TOSS;

	for(i=0;i<NUM_ADC;i++)		// New results only stay new for a loop
	{
		newAdcResult[i]=false;
     e14:	10 92 5d 20 	sts	0x205D, r1
     e18:	10 92 5e 20 	sts	0x205E, r1
	}

	if(ADCA.CH0.INTFLAGS&ADC_CH0IF_bm)	// Got a complete conversion on CH0?
     e1c:	80 91 23 02 	lds	r24, 0x0223
     e20:	80 ff       	sbrs	r24, 0
     e22:	73 c0       	rjmp	.+230    	; 0xf0a <main+0x2e4>
	{
		temp=ADCA.CH0RES;			// Get result
     e24:	80 91 10 02 	lds	r24, 0x0210
     e28:	90 91 11 02 	lds	r25, 0x0211

		if(tossCounter)				// Throw out a couple results while we let mux settle (may not be necessary, but...)
     e2c:	20 91 00 20 	lds	r18, 0x2000
     e30:	22 23       	and	r18, r18
     e32:	21 f0       	breq	.+8      	; 0xe3c <main+0x216>
		{
			tossCounter--;
     e34:	21 50       	subi	r18, 0x01	; 1
     e36:	20 93 00 20 	sts	0x2000, r18
     e3a:	67 c0       	rjmp	.+206    	; 0xf0a <main+0x2e4>
     e3c:	97 ff       	sbrs	r25, 7
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <main+0x21e>
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	90 e0       	ldi	r25, 0x00	; 0
			if(temp<0)					// Pin results positive
			{
				temp=0;
			}

			adcResultTemp+=temp;		// Add to accumulator
     e44:	09 2e       	mov	r0, r25
     e46:	00 0c       	add	r0, r0
     e48:	aa 0b       	sbc	r26, r26
     e4a:	bb 0b       	sbc	r27, r27
     e4c:	40 91 58 20 	lds	r20, 0x2058
     e50:	50 91 59 20 	lds	r21, 0x2059
     e54:	60 91 5a 20 	lds	r22, 0x205A
     e58:	70 91 5b 20 	lds	r23, 0x205B
     e5c:	84 0f       	add	r24, r20
     e5e:	95 1f       	adc	r25, r21
     e60:	a6 1f       	adc	r26, r22
     e62:	b7 1f       	adc	r27, r23
     e64:	80 93 58 20 	sts	0x2058, r24
     e68:	90 93 59 20 	sts	0x2059, r25
     e6c:	a0 93 5a 20 	sts	0x205A, r26
     e70:	b0 93 5b 20 	sts	0x205B, r27
			adcSampleCount++;			// One more sample gathered
     e74:	20 91 57 20 	lds	r18, 0x2057
     e78:	2f 5f       	subi	r18, 0xFF	; 255
     e7a:	20 93 57 20 	sts	0x2057, r18

			if(adcSampleCount>=SAMPLES_TO_ADD)	// Got enough samples?
     e7e:	28 30       	cpi	r18, 0x08	; 8
     e80:	d0 f1       	brcs	.+116    	; 0xef6 <main+0x2d0>
			{
				adcResults[currentAdcSource]=(adcResultTemp/SAMPLES_TO_AVERAGE);	// export reading, with averaging
     e82:	40 91 5c 20 	lds	r20, 0x205C
     e86:	24 2f       	mov	r18, r20
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	f9 01       	movw	r30, r18
     e8c:	ee 0f       	add	r30, r30
     e8e:	ff 1f       	adc	r31, r31
     e90:	e1 5a       	subi	r30, 0xA1	; 161
     e92:	ff 4d       	sbci	r31, 0xDF	; 223
     e94:	63 e0       	ldi	r22, 0x03	; 3
     e96:	b6 95       	lsr	r27
     e98:	a7 95       	ror	r26
     e9a:	97 95       	ror	r25
     e9c:	87 95       	ror	r24
     e9e:	6a 95       	dec	r22
     ea0:	d1 f7       	brne	.-12     	; 0xe96 <main+0x270>
     ea2:	80 83       	st	Z, r24
     ea4:	91 83       	std	Z+1, r25	; 0x01
				newAdcResult[currentAdcSource]=true;								// Let program know we have a new ADC reading
     ea6:	f9 01       	movw	r30, r18
     ea8:	e3 5a       	subi	r30, 0xA3	; 163
     eaa:	ff 4d       	sbci	r31, 0xDF	; 223
     eac:	d0 83       	st	Z, r29

				adcSampleCount=0;						// Restart accumulator
     eae:	10 92 57 20 	sts	0x2057, r1
				tossCounter=SAMPLES_TO_TOSS;			// Ignore initial samples after switching the mux
     eb2:	10 93 00 20 	sts	0x2000, r17
				adcResultTemp=0;						// Clear temp register
     eb6:	10 92 58 20 	sts	0x2058, r1
     eba:	10 92 59 20 	sts	0x2059, r1
     ebe:	10 92 5a 20 	sts	0x205A, r1
     ec2:	10 92 5b 20 	sts	0x205B, r1

				currentAdcSource++;						// Get our next signal source
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	84 0f       	add	r24, r20
				if(currentAdcSource>=NUM_ADC)			// Roll it around
     eca:	82 30       	cpi	r24, 0x02	; 2
     ecc:	18 f4       	brcc	.+6      	; 0xed4 <main+0x2ae>

				adcSampleCount=0;						// Restart accumulator
				tossCounter=SAMPLES_TO_TOSS;			// Ignore initial samples after switching the mux
				adcResultTemp=0;						// Clear temp register

				currentAdcSource++;						// Get our next signal source
     ece:	80 93 5c 20 	sts	0x205C, r24
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <main+0x2b2>
				if(currentAdcSource>=NUM_ADC)			// Roll it around
				{
					currentAdcSource=0;
     ed4:	10 92 5c 20 	sts	0x205C, r1
				}

				switch(currentAdcSource)		// Set mux to the next signal source
     ed8:	80 91 5c 20 	lds	r24, 0x205C
     edc:	88 23       	and	r24, r24
     ede:	39 f0       	breq	.+14     	; 0xeee <main+0x2c8>
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	49 f4       	brne	.+18     	; 0xef6 <main+0x2d0>
					ADCA.CH0.CTRL=ADC_CH_INPUTMODE_DIFF_gc;							// Differential input, no gain.
					ADCA.CH0.MUXCTRL=ADC_CH_MUXPOS_PIN2_gc|ADC_CH_MUXNEG_PIN3_gc;	// Positive input is PIN2 (PA2), Neg is PA3
					break;

					case ADC_YOKE_ROLL:												// PA1
					ADCA.CH0.CTRL=ADC_CH_INPUTMODE_DIFF_gc;							// Differential input, no gain.
     ee4:	c0 93 20 02 	sts	0x0220, r28
					ADCA.CH0.MUXCTRL=ADC_CH_MUXPOS_PIN1_gc|ADC_CH_MUXNEG_PIN3_gc;	// Positive input is PIN1 (PA1), Neg is PA3
     ee8:	f0 92 21 02 	sts	0x0221, r15
     eec:	04 c0       	rjmp	.+8      	; 0xef6 <main+0x2d0>
				}

				switch(currentAdcSource)		// Set mux to the next signal source
				{
					case ADC_YOKE_PITCH:											// PA2
					ADCA.CH0.CTRL=ADC_CH_INPUTMODE_DIFF_gc;							// Differential input, no gain.
     eee:	c0 93 20 02 	sts	0x0220, r28
					ADCA.CH0.MUXCTRL=ADC_CH_MUXPOS_PIN2_gc|ADC_CH_MUXNEG_PIN3_gc;	// Positive input is PIN2 (PA2), Neg is PA3
     ef2:	00 93 21 02 	sts	0x0221, r16
					// *** Bad execution ***
					break;
				}
			}

			ADCA.CH0.INTFLAGS|=ADC_CH0IF_bm;	// Clear flag
     ef6:	80 91 23 02 	lds	r24, 0x0223
     efa:	81 60       	ori	r24, 0x01	; 1
     efc:	80 93 23 02 	sts	0x0223, r24
			ADCA.CH0.CTRL|=ADC_CH_START_bm; 	// Start conversion on channel 0
     f00:	80 91 20 02 	lds	r24, 0x0220
     f04:	80 68       	ori	r24, 0x80	; 128
     f06:	80 93 20 02 	sts	0x0220, r24
	static unsigned int
		lastKeyState;
	unsigned int
		temp;

	lastKeyState=keyState;					// Record old keystate for comparison's sake
     f0a:	80 91 67 20 	lds	r24, 0x2067
     f0e:	90 91 68 20 	lds	r25, 0x2068
     f12:	80 93 4a 20 	sts	0x204A, r24
     f16:	90 93 4b 20 	sts	0x204B, r25

	if(CheckTimer(TIMER_DEBOUNCE))
     f1a:	83 e0       	ldi	r24, 0x03	; 3
     f1c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <CheckTimer>
     f20:	88 23       	and	r24, r24
     f22:	49 f1       	breq	.+82     	; 0xf76 <main+0x350>
	{
		temp=0;
		temp=(PORTA.IN>>5)&0x07;				// Right hand buttons to position
     f24:	20 91 08 06 	lds	r18, 0x0608
     f28:	22 95       	swap	r18
     f2a:	26 95       	lsr	r18
     f2c:	27 70       	andi	r18, 0x07	; 7

		temp|=((unsigned int)PORTB.IN)<<3;		// Grab all of PORTB (test switch will be in wrong spot)
     f2e:	80 91 28 06 	lds	r24, 0x0628
     f32:	38 e0       	ldi	r19, 0x08	; 8
     f34:	83 9f       	mul	r24, r19
     f36:	c0 01       	movw	r24, r0
     f38:	11 24       	eor	r1, r1
     f3a:	ac 01       	movw	r20, r24
     f3c:	42 2b       	or	r20, r18
     f3e:	9a 01       	movw	r18, r20

		temp|=((unsigned int)PORTC.IN&0x06)<<9;	// Get two pushbuttons.  Note, we don't scoot this over all 10 bits since we have a 0 in bit 0 (where the coin was).
     f40:	90 91 48 06 	lds	r25, 0x0648
     f44:	96 70       	andi	r25, 0x06	; 6
     f46:	89 2f       	mov	r24, r25
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	98 2f       	mov	r25, r24
     f4c:	88 27       	eor	r24, r24
     f4e:	99 0f       	add	r25, r25
     f50:	82 2b       	or	r24, r18
     f52:	93 2b       	or	r25, r19
		
		if(PORTC.IN&(1<<0))		// Check coin switch, out of order
     f54:	20 91 48 06 	lds	r18, 0x0648
     f58:	20 fd       	sbrc	r18, 0
		{
			temp|=Im_COIN;
     f5a:	90 61       	ori	r25, 0x10	; 16
		}
		if(PORTB.IN&(1<<7))		// Check test switch, out of order
     f5c:	20 91 28 06 	lds	r18, 0x0628
     f60:	27 fd       	sbrc	r18, 7
		{
			temp|=Im_TEST;
     f62:	90 62       	ori	r25, 0x20	; 32
		}
			
		keyState=temp;
     f64:	80 93 67 20 	sts	0x2067, r24
     f68:	90 93 68 20 	sts	0x2068, r25
//		if(PORTE.IN&(1<<2))		// Check test switch, alone on this port
//		{
//			keyState|=Im_TEST;
//		}

		SetTimer(TIMER_DEBOUNCE,(SECOND/64));
     f6c:	6e e2       	ldi	r22, 0x2E	; 46
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	83 e0       	ldi	r24, 0x03	; 3
     f72:	0e 94 d6 05 	call	0xbac	; 0xbac <SetTimer>
	}

	newKeys=((keyState^lastKeyState)&(keyState));			// Flag the keys which have been pressed since the last test.
     f76:	80 91 4a 20 	lds	r24, 0x204A
     f7a:	90 91 4b 20 	lds	r25, 0x204B
     f7e:	20 91 67 20 	lds	r18, 0x2067
     f82:	30 91 68 20 	lds	r19, 0x2068
     f86:	ac 01       	movw	r20, r24
     f88:	40 95       	com	r20
     f8a:	50 95       	com	r21
     f8c:	42 23       	and	r20, r18
     f8e:	53 23       	and	r21, r19
     f90:	40 93 65 20 	sts	0x2065, r20
     f94:	50 93 66 20 	sts	0x2066, r21
	newKeysReleased=lastKeyState&(keyState^lastKeyState);	// And the ones immediately un-pressed
     f98:	20 95       	com	r18
     f9a:	30 95       	com	r19
     f9c:	82 23       	and	r24, r18
     f9e:	93 23       	and	r25, r19
     fa0:	80 93 63 20 	sts	0x2063, r24
     fa4:	90 93 64 20 	sts	0x2064, r25

	while(1)
	{
		UpdateAdc();
		HandleSwitches();
		State();	// Execute the current program state
     fa8:	e0 91 d4 20 	lds	r30, 0x20D4
     fac:	f0 91 d5 20 	lds	r31, 0x20D5
     fb0:	09 95       	icall
	}
     fb2:	30 cf       	rjmp	.-416    	; 0xe14 <main+0x1ee>

00000fb4 <fdevopen>:
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	31 f4       	brne	.+12     	; 0xfcc <fdevopen+0x18>
     fc0:	61 15       	cp	r22, r1
     fc2:	71 05       	cpc	r23, r1
     fc4:	19 f4       	brne	.+6      	; 0xfcc <fdevopen+0x18>
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	3a c0       	rjmp	.+116    	; 0x1040 <fdevopen+0x8c>
     fcc:	8b 01       	movw	r16, r22
     fce:	ec 01       	movw	r28, r24
     fd0:	6e e0       	ldi	r22, 0x0E	; 14
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	0e 94 2e 0a 	call	0x145c	; 0x145c <calloc>
     fdc:	fc 01       	movw	r30, r24
     fde:	89 2b       	or	r24, r25
     fe0:	91 f3       	breq	.-28     	; 0xfc6 <fdevopen+0x12>
     fe2:	80 e8       	ldi	r24, 0x80	; 128
     fe4:	83 83       	std	Z+3, r24	; 0x03
     fe6:	01 15       	cp	r16, r1
     fe8:	11 05       	cpc	r17, r1
     fea:	71 f0       	breq	.+28     	; 0x1008 <fdevopen+0x54>
     fec:	02 87       	std	Z+10, r16	; 0x0a
     fee:	13 87       	std	Z+11, r17	; 0x0b
     ff0:	81 e8       	ldi	r24, 0x81	; 129
     ff2:	83 83       	std	Z+3, r24	; 0x03
     ff4:	80 91 d8 20 	lds	r24, 0x20D8
     ff8:	90 91 d9 20 	lds	r25, 0x20D9
     ffc:	89 2b       	or	r24, r25
     ffe:	21 f4       	brne	.+8      	; 0x1008 <fdevopen+0x54>
    1000:	e0 93 d8 20 	sts	0x20D8, r30
    1004:	f0 93 d9 20 	sts	0x20D9, r31
    1008:	20 97       	sbiw	r28, 0x00	; 0
    100a:	c9 f0       	breq	.+50     	; 0x103e <fdevopen+0x8a>
    100c:	c0 87       	std	Z+8, r28	; 0x08
    100e:	d1 87       	std	Z+9, r29	; 0x09
    1010:	83 81       	ldd	r24, Z+3	; 0x03
    1012:	82 60       	ori	r24, 0x02	; 2
    1014:	83 83       	std	Z+3, r24	; 0x03
    1016:	80 91 da 20 	lds	r24, 0x20DA
    101a:	90 91 db 20 	lds	r25, 0x20DB
    101e:	89 2b       	or	r24, r25
    1020:	71 f4       	brne	.+28     	; 0x103e <fdevopen+0x8a>
    1022:	e0 93 da 20 	sts	0x20DA, r30
    1026:	f0 93 db 20 	sts	0x20DB, r31
    102a:	80 91 dc 20 	lds	r24, 0x20DC
    102e:	90 91 dd 20 	lds	r25, 0x20DD
    1032:	89 2b       	or	r24, r25
    1034:	21 f4       	brne	.+8      	; 0x103e <fdevopen+0x8a>
    1036:	e0 93 dc 20 	sts	0x20DC, r30
    103a:	f0 93 dd 20 	sts	0x20DD, r31
    103e:	cf 01       	movw	r24, r30
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	1f 91       	pop	r17
    1046:	0f 91       	pop	r16
    1048:	08 95       	ret

0000104a <printf>:
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	ae 01       	movw	r20, r28
    1054:	4b 5f       	subi	r20, 0xFB	; 251
    1056:	5f 4f       	sbci	r21, 0xFF	; 255
    1058:	fa 01       	movw	r30, r20
    105a:	61 91       	ld	r22, Z+
    105c:	71 91       	ld	r23, Z+
    105e:	af 01       	movw	r20, r30
    1060:	80 91 da 20 	lds	r24, 0x20DA
    1064:	90 91 db 20 	lds	r25, 0x20DB
    1068:	0e 94 39 08 	call	0x1072	; 0x1072 <vfprintf>
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	08 95       	ret

00001072 <vfprintf>:
    1072:	2f 92       	push	r2
    1074:	3f 92       	push	r3
    1076:	4f 92       	push	r4
    1078:	5f 92       	push	r5
    107a:	6f 92       	push	r6
    107c:	7f 92       	push	r7
    107e:	8f 92       	push	r8
    1080:	9f 92       	push	r9
    1082:	af 92       	push	r10
    1084:	bf 92       	push	r11
    1086:	cf 92       	push	r12
    1088:	df 92       	push	r13
    108a:	ef 92       	push	r14
    108c:	ff 92       	push	r15
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	2c 97       	sbiw	r28, 0x0c	; 12
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	7c 01       	movw	r14, r24
    10a2:	6b 01       	movw	r12, r22
    10a4:	8a 01       	movw	r16, r20
    10a6:	fc 01       	movw	r30, r24
    10a8:	16 82       	std	Z+6, r1	; 0x06
    10aa:	17 82       	std	Z+7, r1	; 0x07
    10ac:	83 81       	ldd	r24, Z+3	; 0x03
    10ae:	81 ff       	sbrs	r24, 1
    10b0:	bd c1       	rjmp	.+890    	; 0x142c <vfprintf+0x3ba>
    10b2:	ce 01       	movw	r24, r28
    10b4:	01 96       	adiw	r24, 0x01	; 1
    10b6:	4c 01       	movw	r8, r24
    10b8:	f7 01       	movw	r30, r14
    10ba:	93 81       	ldd	r25, Z+3	; 0x03
    10bc:	f6 01       	movw	r30, r12
    10be:	93 fd       	sbrc	r25, 3
    10c0:	85 91       	lpm	r24, Z+
    10c2:	93 ff       	sbrs	r25, 3
    10c4:	81 91       	ld	r24, Z+
    10c6:	6f 01       	movw	r12, r30
    10c8:	88 23       	and	r24, r24
    10ca:	09 f4       	brne	.+2      	; 0x10ce <vfprintf+0x5c>
    10cc:	ab c1       	rjmp	.+854    	; 0x1424 <vfprintf+0x3b2>
    10ce:	85 32       	cpi	r24, 0x25	; 37
    10d0:	39 f4       	brne	.+14     	; 0x10e0 <vfprintf+0x6e>
    10d2:	93 fd       	sbrc	r25, 3
    10d4:	85 91       	lpm	r24, Z+
    10d6:	93 ff       	sbrs	r25, 3
    10d8:	81 91       	ld	r24, Z+
    10da:	6f 01       	movw	r12, r30
    10dc:	85 32       	cpi	r24, 0x25	; 37
    10de:	29 f4       	brne	.+10     	; 0x10ea <vfprintf+0x78>
    10e0:	b7 01       	movw	r22, r14
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 94 0b 	call	0x1728	; 0x1728 <fputc>
    10e8:	e7 cf       	rjmp	.-50     	; 0x10b8 <vfprintf+0x46>
    10ea:	51 2c       	mov	r5, r1
    10ec:	31 2c       	mov	r3, r1
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	20 32       	cpi	r18, 0x20	; 32
    10f2:	a0 f4       	brcc	.+40     	; 0x111c <vfprintf+0xaa>
    10f4:	8b 32       	cpi	r24, 0x2B	; 43
    10f6:	69 f0       	breq	.+26     	; 0x1112 <vfprintf+0xa0>
    10f8:	30 f4       	brcc	.+12     	; 0x1106 <vfprintf+0x94>
    10fa:	80 32       	cpi	r24, 0x20	; 32
    10fc:	59 f0       	breq	.+22     	; 0x1114 <vfprintf+0xa2>
    10fe:	83 32       	cpi	r24, 0x23	; 35
    1100:	69 f4       	brne	.+26     	; 0x111c <vfprintf+0xaa>
    1102:	20 61       	ori	r18, 0x10	; 16
    1104:	2c c0       	rjmp	.+88     	; 0x115e <vfprintf+0xec>
    1106:	8d 32       	cpi	r24, 0x2D	; 45
    1108:	39 f0       	breq	.+14     	; 0x1118 <vfprintf+0xa6>
    110a:	80 33       	cpi	r24, 0x30	; 48
    110c:	39 f4       	brne	.+14     	; 0x111c <vfprintf+0xaa>
    110e:	21 60       	ori	r18, 0x01	; 1
    1110:	26 c0       	rjmp	.+76     	; 0x115e <vfprintf+0xec>
    1112:	22 60       	ori	r18, 0x02	; 2
    1114:	24 60       	ori	r18, 0x04	; 4
    1116:	23 c0       	rjmp	.+70     	; 0x115e <vfprintf+0xec>
    1118:	28 60       	ori	r18, 0x08	; 8
    111a:	21 c0       	rjmp	.+66     	; 0x115e <vfprintf+0xec>
    111c:	27 fd       	sbrc	r18, 7
    111e:	27 c0       	rjmp	.+78     	; 0x116e <vfprintf+0xfc>
    1120:	30 ed       	ldi	r19, 0xD0	; 208
    1122:	38 0f       	add	r19, r24
    1124:	3a 30       	cpi	r19, 0x0A	; 10
    1126:	78 f4       	brcc	.+30     	; 0x1146 <vfprintf+0xd4>
    1128:	26 ff       	sbrs	r18, 6
    112a:	06 c0       	rjmp	.+12     	; 0x1138 <vfprintf+0xc6>
    112c:	fa e0       	ldi	r31, 0x0A	; 10
    112e:	5f 9e       	mul	r5, r31
    1130:	30 0d       	add	r19, r0
    1132:	11 24       	eor	r1, r1
    1134:	53 2e       	mov	r5, r19
    1136:	13 c0       	rjmp	.+38     	; 0x115e <vfprintf+0xec>
    1138:	8a e0       	ldi	r24, 0x0A	; 10
    113a:	38 9e       	mul	r3, r24
    113c:	30 0d       	add	r19, r0
    113e:	11 24       	eor	r1, r1
    1140:	33 2e       	mov	r3, r19
    1142:	20 62       	ori	r18, 0x20	; 32
    1144:	0c c0       	rjmp	.+24     	; 0x115e <vfprintf+0xec>
    1146:	8e 32       	cpi	r24, 0x2E	; 46
    1148:	21 f4       	brne	.+8      	; 0x1152 <vfprintf+0xe0>
    114a:	26 fd       	sbrc	r18, 6
    114c:	6b c1       	rjmp	.+726    	; 0x1424 <vfprintf+0x3b2>
    114e:	20 64       	ori	r18, 0x40	; 64
    1150:	06 c0       	rjmp	.+12     	; 0x115e <vfprintf+0xec>
    1152:	8c 36       	cpi	r24, 0x6C	; 108
    1154:	11 f4       	brne	.+4      	; 0x115a <vfprintf+0xe8>
    1156:	20 68       	ori	r18, 0x80	; 128
    1158:	02 c0       	rjmp	.+4      	; 0x115e <vfprintf+0xec>
    115a:	88 36       	cpi	r24, 0x68	; 104
    115c:	41 f4       	brne	.+16     	; 0x116e <vfprintf+0xfc>
    115e:	f6 01       	movw	r30, r12
    1160:	93 fd       	sbrc	r25, 3
    1162:	85 91       	lpm	r24, Z+
    1164:	93 ff       	sbrs	r25, 3
    1166:	81 91       	ld	r24, Z+
    1168:	6f 01       	movw	r12, r30
    116a:	81 11       	cpse	r24, r1
    116c:	c1 cf       	rjmp	.-126    	; 0x10f0 <vfprintf+0x7e>
    116e:	98 2f       	mov	r25, r24
    1170:	9f 7d       	andi	r25, 0xDF	; 223
    1172:	95 54       	subi	r25, 0x45	; 69
    1174:	93 30       	cpi	r25, 0x03	; 3
    1176:	28 f4       	brcc	.+10     	; 0x1182 <vfprintf+0x110>
    1178:	0c 5f       	subi	r16, 0xFC	; 252
    117a:	1f 4f       	sbci	r17, 0xFF	; 255
    117c:	ff e3       	ldi	r31, 0x3F	; 63
    117e:	f9 83       	std	Y+1, r31	; 0x01
    1180:	0d c0       	rjmp	.+26     	; 0x119c <vfprintf+0x12a>
    1182:	83 36       	cpi	r24, 0x63	; 99
    1184:	31 f0       	breq	.+12     	; 0x1192 <vfprintf+0x120>
    1186:	83 37       	cpi	r24, 0x73	; 115
    1188:	71 f0       	breq	.+28     	; 0x11a6 <vfprintf+0x134>
    118a:	83 35       	cpi	r24, 0x53	; 83
    118c:	09 f0       	breq	.+2      	; 0x1190 <vfprintf+0x11e>
    118e:	5b c0       	rjmp	.+182    	; 0x1246 <vfprintf+0x1d4>
    1190:	22 c0       	rjmp	.+68     	; 0x11d6 <vfprintf+0x164>
    1192:	f8 01       	movw	r30, r16
    1194:	80 81       	ld	r24, Z
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	0e 5f       	subi	r16, 0xFE	; 254
    119a:	1f 4f       	sbci	r17, 0xFF	; 255
    119c:	44 24       	eor	r4, r4
    119e:	43 94       	inc	r4
    11a0:	51 2c       	mov	r5, r1
    11a2:	54 01       	movw	r10, r8
    11a4:	15 c0       	rjmp	.+42     	; 0x11d0 <vfprintf+0x15e>
    11a6:	38 01       	movw	r6, r16
    11a8:	f2 e0       	ldi	r31, 0x02	; 2
    11aa:	6f 0e       	add	r6, r31
    11ac:	71 1c       	adc	r7, r1
    11ae:	f8 01       	movw	r30, r16
    11b0:	a0 80       	ld	r10, Z
    11b2:	b1 80       	ldd	r11, Z+1	; 0x01
    11b4:	26 ff       	sbrs	r18, 6
    11b6:	03 c0       	rjmp	.+6      	; 0x11be <vfprintf+0x14c>
    11b8:	65 2d       	mov	r22, r5
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <vfprintf+0x150>
    11be:	6f ef       	ldi	r22, 0xFF	; 255
    11c0:	7f ef       	ldi	r23, 0xFF	; 255
    11c2:	c5 01       	movw	r24, r10
    11c4:	2c 87       	std	Y+12, r18	; 0x0c
    11c6:	0e 94 89 0b 	call	0x1712	; 0x1712 <strnlen>
    11ca:	2c 01       	movw	r4, r24
    11cc:	83 01       	movw	r16, r6
    11ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    11d0:	2f 77       	andi	r18, 0x7F	; 127
    11d2:	22 2e       	mov	r2, r18
    11d4:	17 c0       	rjmp	.+46     	; 0x1204 <vfprintf+0x192>
    11d6:	38 01       	movw	r6, r16
    11d8:	f2 e0       	ldi	r31, 0x02	; 2
    11da:	6f 0e       	add	r6, r31
    11dc:	71 1c       	adc	r7, r1
    11de:	f8 01       	movw	r30, r16
    11e0:	a0 80       	ld	r10, Z
    11e2:	b1 80       	ldd	r11, Z+1	; 0x01
    11e4:	26 ff       	sbrs	r18, 6
    11e6:	03 c0       	rjmp	.+6      	; 0x11ee <vfprintf+0x17c>
    11e8:	65 2d       	mov	r22, r5
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <vfprintf+0x180>
    11ee:	6f ef       	ldi	r22, 0xFF	; 255
    11f0:	7f ef       	ldi	r23, 0xFF	; 255
    11f2:	c5 01       	movw	r24, r10
    11f4:	2c 87       	std	Y+12, r18	; 0x0c
    11f6:	0e 94 77 0b 	call	0x16ee	; 0x16ee <strnlen_P>
    11fa:	2c 01       	movw	r4, r24
    11fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    11fe:	20 68       	ori	r18, 0x80	; 128
    1200:	22 2e       	mov	r2, r18
    1202:	83 01       	movw	r16, r6
    1204:	23 fc       	sbrc	r2, 3
    1206:	1b c0       	rjmp	.+54     	; 0x123e <vfprintf+0x1cc>
    1208:	83 2d       	mov	r24, r3
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	48 16       	cp	r4, r24
    120e:	59 06       	cpc	r5, r25
    1210:	b0 f4       	brcc	.+44     	; 0x123e <vfprintf+0x1cc>
    1212:	b7 01       	movw	r22, r14
    1214:	80 e2       	ldi	r24, 0x20	; 32
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	0e 94 94 0b 	call	0x1728	; 0x1728 <fputc>
    121c:	3a 94       	dec	r3
    121e:	f4 cf       	rjmp	.-24     	; 0x1208 <vfprintf+0x196>
    1220:	f5 01       	movw	r30, r10
    1222:	27 fc       	sbrc	r2, 7
    1224:	85 91       	lpm	r24, Z+
    1226:	27 fe       	sbrs	r2, 7
    1228:	81 91       	ld	r24, Z+
    122a:	5f 01       	movw	r10, r30
    122c:	b7 01       	movw	r22, r14
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	0e 94 94 0b 	call	0x1728	; 0x1728 <fputc>
    1234:	31 10       	cpse	r3, r1
    1236:	3a 94       	dec	r3
    1238:	f1 e0       	ldi	r31, 0x01	; 1
    123a:	4f 1a       	sub	r4, r31
    123c:	51 08       	sbc	r5, r1
    123e:	41 14       	cp	r4, r1
    1240:	51 04       	cpc	r5, r1
    1242:	71 f7       	brne	.-36     	; 0x1220 <vfprintf+0x1ae>
    1244:	e5 c0       	rjmp	.+458    	; 0x1410 <vfprintf+0x39e>
    1246:	84 36       	cpi	r24, 0x64	; 100
    1248:	11 f0       	breq	.+4      	; 0x124e <vfprintf+0x1dc>
    124a:	89 36       	cpi	r24, 0x69	; 105
    124c:	39 f5       	brne	.+78     	; 0x129c <vfprintf+0x22a>
    124e:	f8 01       	movw	r30, r16
    1250:	27 ff       	sbrs	r18, 7
    1252:	07 c0       	rjmp	.+14     	; 0x1262 <vfprintf+0x1f0>
    1254:	60 81       	ld	r22, Z
    1256:	71 81       	ldd	r23, Z+1	; 0x01
    1258:	82 81       	ldd	r24, Z+2	; 0x02
    125a:	93 81       	ldd	r25, Z+3	; 0x03
    125c:	0c 5f       	subi	r16, 0xFC	; 252
    125e:	1f 4f       	sbci	r17, 0xFF	; 255
    1260:	08 c0       	rjmp	.+16     	; 0x1272 <vfprintf+0x200>
    1262:	60 81       	ld	r22, Z
    1264:	71 81       	ldd	r23, Z+1	; 0x01
    1266:	07 2e       	mov	r0, r23
    1268:	00 0c       	add	r0, r0
    126a:	88 0b       	sbc	r24, r24
    126c:	99 0b       	sbc	r25, r25
    126e:	0e 5f       	subi	r16, 0xFE	; 254
    1270:	1f 4f       	sbci	r17, 0xFF	; 255
    1272:	2f 76       	andi	r18, 0x6F	; 111
    1274:	72 2e       	mov	r7, r18
    1276:	97 ff       	sbrs	r25, 7
    1278:	09 c0       	rjmp	.+18     	; 0x128c <vfprintf+0x21a>
    127a:	90 95       	com	r25
    127c:	80 95       	com	r24
    127e:	70 95       	com	r23
    1280:	61 95       	neg	r22
    1282:	7f 4f       	sbci	r23, 0xFF	; 255
    1284:	8f 4f       	sbci	r24, 0xFF	; 255
    1286:	9f 4f       	sbci	r25, 0xFF	; 255
    1288:	20 68       	ori	r18, 0x80	; 128
    128a:	72 2e       	mov	r7, r18
    128c:	2a e0       	ldi	r18, 0x0A	; 10
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	a4 01       	movw	r20, r8
    1292:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__ultoa_invert>
    1296:	a8 2e       	mov	r10, r24
    1298:	a8 18       	sub	r10, r8
    129a:	44 c0       	rjmp	.+136    	; 0x1324 <vfprintf+0x2b2>
    129c:	85 37       	cpi	r24, 0x75	; 117
    129e:	29 f4       	brne	.+10     	; 0x12aa <vfprintf+0x238>
    12a0:	2f 7e       	andi	r18, 0xEF	; 239
    12a2:	b2 2e       	mov	r11, r18
    12a4:	2a e0       	ldi	r18, 0x0A	; 10
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	25 c0       	rjmp	.+74     	; 0x12f4 <vfprintf+0x282>
    12aa:	f2 2f       	mov	r31, r18
    12ac:	f9 7f       	andi	r31, 0xF9	; 249
    12ae:	bf 2e       	mov	r11, r31
    12b0:	8f 36       	cpi	r24, 0x6F	; 111
    12b2:	c1 f0       	breq	.+48     	; 0x12e4 <vfprintf+0x272>
    12b4:	18 f4       	brcc	.+6      	; 0x12bc <vfprintf+0x24a>
    12b6:	88 35       	cpi	r24, 0x58	; 88
    12b8:	79 f0       	breq	.+30     	; 0x12d8 <vfprintf+0x266>
    12ba:	b4 c0       	rjmp	.+360    	; 0x1424 <vfprintf+0x3b2>
    12bc:	80 37       	cpi	r24, 0x70	; 112
    12be:	19 f0       	breq	.+6      	; 0x12c6 <vfprintf+0x254>
    12c0:	88 37       	cpi	r24, 0x78	; 120
    12c2:	21 f0       	breq	.+8      	; 0x12cc <vfprintf+0x25a>
    12c4:	af c0       	rjmp	.+350    	; 0x1424 <vfprintf+0x3b2>
    12c6:	2f 2f       	mov	r18, r31
    12c8:	20 61       	ori	r18, 0x10	; 16
    12ca:	b2 2e       	mov	r11, r18
    12cc:	b4 fe       	sbrs	r11, 4
    12ce:	0d c0       	rjmp	.+26     	; 0x12ea <vfprintf+0x278>
    12d0:	8b 2d       	mov	r24, r11
    12d2:	84 60       	ori	r24, 0x04	; 4
    12d4:	b8 2e       	mov	r11, r24
    12d6:	09 c0       	rjmp	.+18     	; 0x12ea <vfprintf+0x278>
    12d8:	24 ff       	sbrs	r18, 4
    12da:	0a c0       	rjmp	.+20     	; 0x12f0 <vfprintf+0x27e>
    12dc:	9f 2f       	mov	r25, r31
    12de:	96 60       	ori	r25, 0x06	; 6
    12e0:	b9 2e       	mov	r11, r25
    12e2:	06 c0       	rjmp	.+12     	; 0x12f0 <vfprintf+0x27e>
    12e4:	28 e0       	ldi	r18, 0x08	; 8
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	05 c0       	rjmp	.+10     	; 0x12f4 <vfprintf+0x282>
    12ea:	20 e1       	ldi	r18, 0x10	; 16
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <vfprintf+0x282>
    12f0:	20 e1       	ldi	r18, 0x10	; 16
    12f2:	32 e0       	ldi	r19, 0x02	; 2
    12f4:	f8 01       	movw	r30, r16
    12f6:	b7 fe       	sbrs	r11, 7
    12f8:	07 c0       	rjmp	.+14     	; 0x1308 <vfprintf+0x296>
    12fa:	60 81       	ld	r22, Z
    12fc:	71 81       	ldd	r23, Z+1	; 0x01
    12fe:	82 81       	ldd	r24, Z+2	; 0x02
    1300:	93 81       	ldd	r25, Z+3	; 0x03
    1302:	0c 5f       	subi	r16, 0xFC	; 252
    1304:	1f 4f       	sbci	r17, 0xFF	; 255
    1306:	06 c0       	rjmp	.+12     	; 0x1314 <vfprintf+0x2a2>
    1308:	60 81       	ld	r22, Z
    130a:	71 81       	ldd	r23, Z+1	; 0x01
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	0e 5f       	subi	r16, 0xFE	; 254
    1312:	1f 4f       	sbci	r17, 0xFF	; 255
    1314:	a4 01       	movw	r20, r8
    1316:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__ultoa_invert>
    131a:	a8 2e       	mov	r10, r24
    131c:	a8 18       	sub	r10, r8
    131e:	fb 2d       	mov	r31, r11
    1320:	ff 77       	andi	r31, 0x7F	; 127
    1322:	7f 2e       	mov	r7, r31
    1324:	76 fe       	sbrs	r7, 6
    1326:	0b c0       	rjmp	.+22     	; 0x133e <vfprintf+0x2cc>
    1328:	37 2d       	mov	r19, r7
    132a:	3e 7f       	andi	r19, 0xFE	; 254
    132c:	a5 14       	cp	r10, r5
    132e:	50 f4       	brcc	.+20     	; 0x1344 <vfprintf+0x2d2>
    1330:	74 fe       	sbrs	r7, 4
    1332:	0a c0       	rjmp	.+20     	; 0x1348 <vfprintf+0x2d6>
    1334:	72 fc       	sbrc	r7, 2
    1336:	08 c0       	rjmp	.+16     	; 0x1348 <vfprintf+0x2d6>
    1338:	37 2d       	mov	r19, r7
    133a:	3e 7e       	andi	r19, 0xEE	; 238
    133c:	05 c0       	rjmp	.+10     	; 0x1348 <vfprintf+0x2d6>
    133e:	ba 2c       	mov	r11, r10
    1340:	37 2d       	mov	r19, r7
    1342:	03 c0       	rjmp	.+6      	; 0x134a <vfprintf+0x2d8>
    1344:	ba 2c       	mov	r11, r10
    1346:	01 c0       	rjmp	.+2      	; 0x134a <vfprintf+0x2d8>
    1348:	b5 2c       	mov	r11, r5
    134a:	34 ff       	sbrs	r19, 4
    134c:	0d c0       	rjmp	.+26     	; 0x1368 <vfprintf+0x2f6>
    134e:	fe 01       	movw	r30, r28
    1350:	ea 0d       	add	r30, r10
    1352:	f1 1d       	adc	r31, r1
    1354:	80 81       	ld	r24, Z
    1356:	80 33       	cpi	r24, 0x30	; 48
    1358:	11 f4       	brne	.+4      	; 0x135e <vfprintf+0x2ec>
    135a:	39 7e       	andi	r19, 0xE9	; 233
    135c:	09 c0       	rjmp	.+18     	; 0x1370 <vfprintf+0x2fe>
    135e:	32 ff       	sbrs	r19, 2
    1360:	06 c0       	rjmp	.+12     	; 0x136e <vfprintf+0x2fc>
    1362:	b3 94       	inc	r11
    1364:	b3 94       	inc	r11
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <vfprintf+0x2fe>
    1368:	83 2f       	mov	r24, r19
    136a:	86 78       	andi	r24, 0x86	; 134
    136c:	09 f0       	breq	.+2      	; 0x1370 <vfprintf+0x2fe>
    136e:	b3 94       	inc	r11
    1370:	33 fd       	sbrc	r19, 3
    1372:	13 c0       	rjmp	.+38     	; 0x139a <vfprintf+0x328>
    1374:	30 ff       	sbrs	r19, 0
    1376:	06 c0       	rjmp	.+12     	; 0x1384 <vfprintf+0x312>
    1378:	5a 2c       	mov	r5, r10
    137a:	b3 14       	cp	r11, r3
    137c:	18 f4       	brcc	.+6      	; 0x1384 <vfprintf+0x312>
    137e:	53 0c       	add	r5, r3
    1380:	5b 18       	sub	r5, r11
    1382:	b3 2c       	mov	r11, r3
    1384:	b3 14       	cp	r11, r3
    1386:	68 f4       	brcc	.+26     	; 0x13a2 <vfprintf+0x330>
    1388:	b7 01       	movw	r22, r14
    138a:	80 e2       	ldi	r24, 0x20	; 32
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	3c 87       	std	Y+12, r19	; 0x0c
    1390:	0e 94 94 0b 	call	0x1728	; 0x1728 <fputc>
    1394:	b3 94       	inc	r11
    1396:	3c 85       	ldd	r19, Y+12	; 0x0c
    1398:	f5 cf       	rjmp	.-22     	; 0x1384 <vfprintf+0x312>
    139a:	b3 14       	cp	r11, r3
    139c:	10 f4       	brcc	.+4      	; 0x13a2 <vfprintf+0x330>
    139e:	3b 18       	sub	r3, r11
    13a0:	01 c0       	rjmp	.+2      	; 0x13a4 <vfprintf+0x332>
    13a2:	31 2c       	mov	r3, r1
    13a4:	34 ff       	sbrs	r19, 4
    13a6:	12 c0       	rjmp	.+36     	; 0x13cc <vfprintf+0x35a>
    13a8:	b7 01       	movw	r22, r14
    13aa:	80 e3       	ldi	r24, 0x30	; 48
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	3c 87       	std	Y+12, r19	; 0x0c
    13b0:	0e 94 94 0b 	call	0x1728	; 0x1728 <fputc>
    13b4:	3c 85       	ldd	r19, Y+12	; 0x0c
    13b6:	32 ff       	sbrs	r19, 2
    13b8:	17 c0       	rjmp	.+46     	; 0x13e8 <vfprintf+0x376>
    13ba:	31 fd       	sbrc	r19, 1
    13bc:	03 c0       	rjmp	.+6      	; 0x13c4 <vfprintf+0x352>
    13be:	88 e7       	ldi	r24, 0x78	; 120
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <vfprintf+0x356>
    13c4:	88 e5       	ldi	r24, 0x58	; 88
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	b7 01       	movw	r22, r14
    13ca:	0c c0       	rjmp	.+24     	; 0x13e4 <vfprintf+0x372>
    13cc:	83 2f       	mov	r24, r19
    13ce:	86 78       	andi	r24, 0x86	; 134
    13d0:	59 f0       	breq	.+22     	; 0x13e8 <vfprintf+0x376>
    13d2:	31 ff       	sbrs	r19, 1
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <vfprintf+0x368>
    13d6:	8b e2       	ldi	r24, 0x2B	; 43
    13d8:	01 c0       	rjmp	.+2      	; 0x13dc <vfprintf+0x36a>
    13da:	80 e2       	ldi	r24, 0x20	; 32
    13dc:	37 fd       	sbrc	r19, 7
    13de:	8d e2       	ldi	r24, 0x2D	; 45
    13e0:	b7 01       	movw	r22, r14
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 94 0b 	call	0x1728	; 0x1728 <fputc>
    13e8:	a5 14       	cp	r10, r5
    13ea:	38 f4       	brcc	.+14     	; 0x13fa <vfprintf+0x388>
    13ec:	b7 01       	movw	r22, r14
    13ee:	80 e3       	ldi	r24, 0x30	; 48
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	0e 94 94 0b 	call	0x1728	; 0x1728 <fputc>
    13f6:	5a 94       	dec	r5
    13f8:	f7 cf       	rjmp	.-18     	; 0x13e8 <vfprintf+0x376>
    13fa:	aa 94       	dec	r10
    13fc:	f4 01       	movw	r30, r8
    13fe:	ea 0d       	add	r30, r10
    1400:	f1 1d       	adc	r31, r1
    1402:	80 81       	ld	r24, Z
    1404:	b7 01       	movw	r22, r14
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0e 94 94 0b 	call	0x1728	; 0x1728 <fputc>
    140c:	a1 10       	cpse	r10, r1
    140e:	f5 cf       	rjmp	.-22     	; 0x13fa <vfprintf+0x388>
    1410:	33 20       	and	r3, r3
    1412:	09 f4       	brne	.+2      	; 0x1416 <vfprintf+0x3a4>
    1414:	51 ce       	rjmp	.-862    	; 0x10b8 <vfprintf+0x46>
    1416:	b7 01       	movw	r22, r14
    1418:	80 e2       	ldi	r24, 0x20	; 32
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0e 94 94 0b 	call	0x1728	; 0x1728 <fputc>
    1420:	3a 94       	dec	r3
    1422:	f6 cf       	rjmp	.-20     	; 0x1410 <vfprintf+0x39e>
    1424:	f7 01       	movw	r30, r14
    1426:	86 81       	ldd	r24, Z+6	; 0x06
    1428:	97 81       	ldd	r25, Z+7	; 0x07
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <vfprintf+0x3be>
    142c:	8f ef       	ldi	r24, 0xFF	; 255
    142e:	9f ef       	ldi	r25, 0xFF	; 255
    1430:	2c 96       	adiw	r28, 0x0c	; 12
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	ff 90       	pop	r15
    1440:	ef 90       	pop	r14
    1442:	df 90       	pop	r13
    1444:	cf 90       	pop	r12
    1446:	bf 90       	pop	r11
    1448:	af 90       	pop	r10
    144a:	9f 90       	pop	r9
    144c:	8f 90       	pop	r8
    144e:	7f 90       	pop	r7
    1450:	6f 90       	pop	r6
    1452:	5f 90       	pop	r5
    1454:	4f 90       	pop	r4
    1456:	3f 90       	pop	r3
    1458:	2f 90       	pop	r2
    145a:	08 95       	ret

0000145c <calloc>:
    145c:	0f 93       	push	r16
    145e:	1f 93       	push	r17
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	86 9f       	mul	r24, r22
    1466:	80 01       	movw	r16, r0
    1468:	87 9f       	mul	r24, r23
    146a:	10 0d       	add	r17, r0
    146c:	96 9f       	mul	r25, r22
    146e:	10 0d       	add	r17, r0
    1470:	11 24       	eor	r1, r1
    1472:	c8 01       	movw	r24, r16
    1474:	0e 94 4a 0a 	call	0x1494	; 0x1494 <malloc>
    1478:	ec 01       	movw	r28, r24
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	29 f0       	breq	.+10     	; 0x1488 <calloc+0x2c>
    147e:	a8 01       	movw	r20, r16
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	0e 94 82 0b 	call	0x1704	; 0x1704 <memset>
    1488:	ce 01       	movw	r24, r28
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	1f 91       	pop	r17
    1490:	0f 91       	pop	r16
    1492:	08 95       	ret

00001494 <malloc>:
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	82 30       	cpi	r24, 0x02	; 2
    149a:	91 05       	cpc	r25, r1
    149c:	10 f4       	brcc	.+4      	; 0x14a2 <malloc+0xe>
    149e:	82 e0       	ldi	r24, 0x02	; 2
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	e0 91 e0 20 	lds	r30, 0x20E0
    14a6:	f0 91 e1 20 	lds	r31, 0x20E1
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	c0 e0       	ldi	r28, 0x00	; 0
    14b0:	d0 e0       	ldi	r29, 0x00	; 0
    14b2:	30 97       	sbiw	r30, 0x00	; 0
    14b4:	11 f1       	breq	.+68     	; 0x14fa <malloc+0x66>
    14b6:	40 81       	ld	r20, Z
    14b8:	51 81       	ldd	r21, Z+1	; 0x01
    14ba:	48 17       	cp	r20, r24
    14bc:	59 07       	cpc	r21, r25
    14be:	c0 f0       	brcs	.+48     	; 0x14f0 <malloc+0x5c>
    14c0:	48 17       	cp	r20, r24
    14c2:	59 07       	cpc	r21, r25
    14c4:	61 f4       	brne	.+24     	; 0x14de <malloc+0x4a>
    14c6:	82 81       	ldd	r24, Z+2	; 0x02
    14c8:	93 81       	ldd	r25, Z+3	; 0x03
    14ca:	20 97       	sbiw	r28, 0x00	; 0
    14cc:	19 f0       	breq	.+6      	; 0x14d4 <malloc+0x40>
    14ce:	8a 83       	std	Y+2, r24	; 0x02
    14d0:	9b 83       	std	Y+3, r25	; 0x03
    14d2:	2b c0       	rjmp	.+86     	; 0x152a <malloc+0x96>
    14d4:	80 93 e0 20 	sts	0x20E0, r24
    14d8:	90 93 e1 20 	sts	0x20E1, r25
    14dc:	26 c0       	rjmp	.+76     	; 0x152a <malloc+0x96>
    14de:	21 15       	cp	r18, r1
    14e0:	31 05       	cpc	r19, r1
    14e2:	19 f0       	breq	.+6      	; 0x14ea <malloc+0x56>
    14e4:	42 17       	cp	r20, r18
    14e6:	53 07       	cpc	r21, r19
    14e8:	18 f4       	brcc	.+6      	; 0x14f0 <malloc+0x5c>
    14ea:	9a 01       	movw	r18, r20
    14ec:	be 01       	movw	r22, r28
    14ee:	df 01       	movw	r26, r30
    14f0:	ef 01       	movw	r28, r30
    14f2:	02 80       	ldd	r0, Z+2	; 0x02
    14f4:	f3 81       	ldd	r31, Z+3	; 0x03
    14f6:	e0 2d       	mov	r30, r0
    14f8:	dc cf       	rjmp	.-72     	; 0x14b2 <malloc+0x1e>
    14fa:	21 15       	cp	r18, r1
    14fc:	31 05       	cpc	r19, r1
    14fe:	09 f1       	breq	.+66     	; 0x1542 <malloc+0xae>
    1500:	28 1b       	sub	r18, r24
    1502:	39 0b       	sbc	r19, r25
    1504:	24 30       	cpi	r18, 0x04	; 4
    1506:	31 05       	cpc	r19, r1
    1508:	90 f4       	brcc	.+36     	; 0x152e <malloc+0x9a>
    150a:	12 96       	adiw	r26, 0x02	; 2
    150c:	8d 91       	ld	r24, X+
    150e:	9c 91       	ld	r25, X
    1510:	13 97       	sbiw	r26, 0x03	; 3
    1512:	61 15       	cp	r22, r1
    1514:	71 05       	cpc	r23, r1
    1516:	21 f0       	breq	.+8      	; 0x1520 <malloc+0x8c>
    1518:	fb 01       	movw	r30, r22
    151a:	82 83       	std	Z+2, r24	; 0x02
    151c:	93 83       	std	Z+3, r25	; 0x03
    151e:	04 c0       	rjmp	.+8      	; 0x1528 <malloc+0x94>
    1520:	80 93 e0 20 	sts	0x20E0, r24
    1524:	90 93 e1 20 	sts	0x20E1, r25
    1528:	fd 01       	movw	r30, r26
    152a:	32 96       	adiw	r30, 0x02	; 2
    152c:	44 c0       	rjmp	.+136    	; 0x15b6 <malloc+0x122>
    152e:	fd 01       	movw	r30, r26
    1530:	e2 0f       	add	r30, r18
    1532:	f3 1f       	adc	r31, r19
    1534:	81 93       	st	Z+, r24
    1536:	91 93       	st	Z+, r25
    1538:	22 50       	subi	r18, 0x02	; 2
    153a:	31 09       	sbc	r19, r1
    153c:	2d 93       	st	X+, r18
    153e:	3c 93       	st	X, r19
    1540:	3a c0       	rjmp	.+116    	; 0x15b6 <malloc+0x122>
    1542:	20 91 de 20 	lds	r18, 0x20DE
    1546:	30 91 df 20 	lds	r19, 0x20DF
    154a:	23 2b       	or	r18, r19
    154c:	41 f4       	brne	.+16     	; 0x155e <malloc+0xca>
    154e:	20 91 03 20 	lds	r18, 0x2003
    1552:	30 91 04 20 	lds	r19, 0x2004
    1556:	20 93 de 20 	sts	0x20DE, r18
    155a:	30 93 df 20 	sts	0x20DF, r19
    155e:	20 91 01 20 	lds	r18, 0x2001
    1562:	30 91 02 20 	lds	r19, 0x2002
    1566:	21 15       	cp	r18, r1
    1568:	31 05       	cpc	r19, r1
    156a:	41 f4       	brne	.+16     	; 0x157c <malloc+0xe8>
    156c:	2d b7       	in	r18, 0x3d	; 61
    156e:	3e b7       	in	r19, 0x3e	; 62
    1570:	40 91 05 20 	lds	r20, 0x2005
    1574:	50 91 06 20 	lds	r21, 0x2006
    1578:	24 1b       	sub	r18, r20
    157a:	35 0b       	sbc	r19, r21
    157c:	e0 91 de 20 	lds	r30, 0x20DE
    1580:	f0 91 df 20 	lds	r31, 0x20DF
    1584:	e2 17       	cp	r30, r18
    1586:	f3 07       	cpc	r31, r19
    1588:	a0 f4       	brcc	.+40     	; 0x15b2 <malloc+0x11e>
    158a:	2e 1b       	sub	r18, r30
    158c:	3f 0b       	sbc	r19, r31
    158e:	28 17       	cp	r18, r24
    1590:	39 07       	cpc	r19, r25
    1592:	78 f0       	brcs	.+30     	; 0x15b2 <malloc+0x11e>
    1594:	ac 01       	movw	r20, r24
    1596:	4e 5f       	subi	r20, 0xFE	; 254
    1598:	5f 4f       	sbci	r21, 0xFF	; 255
    159a:	24 17       	cp	r18, r20
    159c:	35 07       	cpc	r19, r21
    159e:	48 f0       	brcs	.+18     	; 0x15b2 <malloc+0x11e>
    15a0:	4e 0f       	add	r20, r30
    15a2:	5f 1f       	adc	r21, r31
    15a4:	40 93 de 20 	sts	0x20DE, r20
    15a8:	50 93 df 20 	sts	0x20DF, r21
    15ac:	81 93       	st	Z+, r24
    15ae:	91 93       	st	Z+, r25
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <malloc+0x122>
    15b2:	e0 e0       	ldi	r30, 0x00	; 0
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	cf 01       	movw	r24, r30
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	08 95       	ret

000015be <free>:
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	09 f4       	brne	.+2      	; 0x15cc <free+0xe>
    15ca:	8c c0       	rjmp	.+280    	; 0x16e4 <free+0x126>
    15cc:	fc 01       	movw	r30, r24
    15ce:	32 97       	sbiw	r30, 0x02	; 2
    15d0:	12 82       	std	Z+2, r1	; 0x02
    15d2:	13 82       	std	Z+3, r1	; 0x03
    15d4:	00 91 e0 20 	lds	r16, 0x20E0
    15d8:	10 91 e1 20 	lds	r17, 0x20E1
    15dc:	01 15       	cp	r16, r1
    15de:	11 05       	cpc	r17, r1
    15e0:	81 f4       	brne	.+32     	; 0x1602 <free+0x44>
    15e2:	20 81       	ld	r18, Z
    15e4:	31 81       	ldd	r19, Z+1	; 0x01
    15e6:	82 0f       	add	r24, r18
    15e8:	93 1f       	adc	r25, r19
    15ea:	20 91 de 20 	lds	r18, 0x20DE
    15ee:	30 91 df 20 	lds	r19, 0x20DF
    15f2:	28 17       	cp	r18, r24
    15f4:	39 07       	cpc	r19, r25
    15f6:	79 f5       	brne	.+94     	; 0x1656 <free+0x98>
    15f8:	e0 93 de 20 	sts	0x20DE, r30
    15fc:	f0 93 df 20 	sts	0x20DF, r31
    1600:	71 c0       	rjmp	.+226    	; 0x16e4 <free+0x126>
    1602:	d8 01       	movw	r26, r16
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	50 e0       	ldi	r21, 0x00	; 0
    1608:	ae 17       	cp	r26, r30
    160a:	bf 07       	cpc	r27, r31
    160c:	50 f4       	brcc	.+20     	; 0x1622 <free+0x64>
    160e:	12 96       	adiw	r26, 0x02	; 2
    1610:	2d 91       	ld	r18, X+
    1612:	3c 91       	ld	r19, X
    1614:	13 97       	sbiw	r26, 0x03	; 3
    1616:	ad 01       	movw	r20, r26
    1618:	21 15       	cp	r18, r1
    161a:	31 05       	cpc	r19, r1
    161c:	09 f1       	breq	.+66     	; 0x1660 <free+0xa2>
    161e:	d9 01       	movw	r26, r18
    1620:	f3 cf       	rjmp	.-26     	; 0x1608 <free+0x4a>
    1622:	9d 01       	movw	r18, r26
    1624:	da 01       	movw	r26, r20
    1626:	22 83       	std	Z+2, r18	; 0x02
    1628:	33 83       	std	Z+3, r19	; 0x03
    162a:	60 81       	ld	r22, Z
    162c:	71 81       	ldd	r23, Z+1	; 0x01
    162e:	86 0f       	add	r24, r22
    1630:	97 1f       	adc	r25, r23
    1632:	82 17       	cp	r24, r18
    1634:	93 07       	cpc	r25, r19
    1636:	69 f4       	brne	.+26     	; 0x1652 <free+0x94>
    1638:	ec 01       	movw	r28, r24
    163a:	28 81       	ld	r18, Y
    163c:	39 81       	ldd	r19, Y+1	; 0x01
    163e:	26 0f       	add	r18, r22
    1640:	37 1f       	adc	r19, r23
    1642:	2e 5f       	subi	r18, 0xFE	; 254
    1644:	3f 4f       	sbci	r19, 0xFF	; 255
    1646:	20 83       	st	Z, r18
    1648:	31 83       	std	Z+1, r19	; 0x01
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	9b 81       	ldd	r25, Y+3	; 0x03
    164e:	82 83       	std	Z+2, r24	; 0x02
    1650:	93 83       	std	Z+3, r25	; 0x03
    1652:	45 2b       	or	r20, r21
    1654:	29 f4       	brne	.+10     	; 0x1660 <free+0xa2>
    1656:	e0 93 e0 20 	sts	0x20E0, r30
    165a:	f0 93 e1 20 	sts	0x20E1, r31
    165e:	42 c0       	rjmp	.+132    	; 0x16e4 <free+0x126>
    1660:	12 96       	adiw	r26, 0x02	; 2
    1662:	ed 93       	st	X+, r30
    1664:	fc 93       	st	X, r31
    1666:	13 97       	sbiw	r26, 0x03	; 3
    1668:	ed 01       	movw	r28, r26
    166a:	49 91       	ld	r20, Y+
    166c:	59 91       	ld	r21, Y+
    166e:	9e 01       	movw	r18, r28
    1670:	24 0f       	add	r18, r20
    1672:	35 1f       	adc	r19, r21
    1674:	e2 17       	cp	r30, r18
    1676:	f3 07       	cpc	r31, r19
    1678:	71 f4       	brne	.+28     	; 0x1696 <free+0xd8>
    167a:	80 81       	ld	r24, Z
    167c:	91 81       	ldd	r25, Z+1	; 0x01
    167e:	84 0f       	add	r24, r20
    1680:	95 1f       	adc	r25, r21
    1682:	02 96       	adiw	r24, 0x02	; 2
    1684:	8d 93       	st	X+, r24
    1686:	9c 93       	st	X, r25
    1688:	11 97       	sbiw	r26, 0x01	; 1
    168a:	82 81       	ldd	r24, Z+2	; 0x02
    168c:	93 81       	ldd	r25, Z+3	; 0x03
    168e:	12 96       	adiw	r26, 0x02	; 2
    1690:	8d 93       	st	X+, r24
    1692:	9c 93       	st	X, r25
    1694:	13 97       	sbiw	r26, 0x03	; 3
    1696:	e0 e0       	ldi	r30, 0x00	; 0
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	d8 01       	movw	r26, r16
    169c:	12 96       	adiw	r26, 0x02	; 2
    169e:	8d 91       	ld	r24, X+
    16a0:	9c 91       	ld	r25, X
    16a2:	13 97       	sbiw	r26, 0x03	; 3
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	19 f0       	breq	.+6      	; 0x16ae <free+0xf0>
    16a8:	f8 01       	movw	r30, r16
    16aa:	8c 01       	movw	r16, r24
    16ac:	f6 cf       	rjmp	.-20     	; 0x169a <free+0xdc>
    16ae:	8d 91       	ld	r24, X+
    16b0:	9c 91       	ld	r25, X
    16b2:	98 01       	movw	r18, r16
    16b4:	2e 5f       	subi	r18, 0xFE	; 254
    16b6:	3f 4f       	sbci	r19, 0xFF	; 255
    16b8:	82 0f       	add	r24, r18
    16ba:	93 1f       	adc	r25, r19
    16bc:	20 91 de 20 	lds	r18, 0x20DE
    16c0:	30 91 df 20 	lds	r19, 0x20DF
    16c4:	28 17       	cp	r18, r24
    16c6:	39 07       	cpc	r19, r25
    16c8:	69 f4       	brne	.+26     	; 0x16e4 <free+0x126>
    16ca:	30 97       	sbiw	r30, 0x00	; 0
    16cc:	29 f4       	brne	.+10     	; 0x16d8 <free+0x11a>
    16ce:	10 92 e0 20 	sts	0x20E0, r1
    16d2:	10 92 e1 20 	sts	0x20E1, r1
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <free+0x11e>
    16d8:	12 82       	std	Z+2, r1	; 0x02
    16da:	13 82       	std	Z+3, r1	; 0x03
    16dc:	00 93 de 20 	sts	0x20DE, r16
    16e0:	10 93 df 20 	sts	0x20DF, r17
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	1f 91       	pop	r17
    16ea:	0f 91       	pop	r16
    16ec:	08 95       	ret

000016ee <strnlen_P>:
    16ee:	fc 01       	movw	r30, r24
    16f0:	05 90       	lpm	r0, Z+
    16f2:	61 50       	subi	r22, 0x01	; 1
    16f4:	70 40       	sbci	r23, 0x00	; 0
    16f6:	01 10       	cpse	r0, r1
    16f8:	d8 f7       	brcc	.-10     	; 0x16f0 <strnlen_P+0x2>
    16fa:	80 95       	com	r24
    16fc:	90 95       	com	r25
    16fe:	8e 0f       	add	r24, r30
    1700:	9f 1f       	adc	r25, r31
    1702:	08 95       	ret

00001704 <memset>:
    1704:	dc 01       	movw	r26, r24
    1706:	01 c0       	rjmp	.+2      	; 0x170a <memset+0x6>
    1708:	6d 93       	st	X+, r22
    170a:	41 50       	subi	r20, 0x01	; 1
    170c:	50 40       	sbci	r21, 0x00	; 0
    170e:	e0 f7       	brcc	.-8      	; 0x1708 <memset+0x4>
    1710:	08 95       	ret

00001712 <strnlen>:
    1712:	fc 01       	movw	r30, r24
    1714:	61 50       	subi	r22, 0x01	; 1
    1716:	70 40       	sbci	r23, 0x00	; 0
    1718:	01 90       	ld	r0, Z+
    171a:	01 10       	cpse	r0, r1
    171c:	d8 f7       	brcc	.-10     	; 0x1714 <strnlen+0x2>
    171e:	80 95       	com	r24
    1720:	90 95       	com	r25
    1722:	8e 0f       	add	r24, r30
    1724:	9f 1f       	adc	r25, r31
    1726:	08 95       	ret

00001728 <fputc>:
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	fb 01       	movw	r30, r22
    1732:	23 81       	ldd	r18, Z+3	; 0x03
    1734:	21 fd       	sbrc	r18, 1
    1736:	03 c0       	rjmp	.+6      	; 0x173e <fputc+0x16>
    1738:	8f ef       	ldi	r24, 0xFF	; 255
    173a:	9f ef       	ldi	r25, 0xFF	; 255
    173c:	28 c0       	rjmp	.+80     	; 0x178e <fputc+0x66>
    173e:	22 ff       	sbrs	r18, 2
    1740:	16 c0       	rjmp	.+44     	; 0x176e <fputc+0x46>
    1742:	46 81       	ldd	r20, Z+6	; 0x06
    1744:	57 81       	ldd	r21, Z+7	; 0x07
    1746:	24 81       	ldd	r18, Z+4	; 0x04
    1748:	35 81       	ldd	r19, Z+5	; 0x05
    174a:	42 17       	cp	r20, r18
    174c:	53 07       	cpc	r21, r19
    174e:	44 f4       	brge	.+16     	; 0x1760 <fputc+0x38>
    1750:	a0 81       	ld	r26, Z
    1752:	b1 81       	ldd	r27, Z+1	; 0x01
    1754:	9d 01       	movw	r18, r26
    1756:	2f 5f       	subi	r18, 0xFF	; 255
    1758:	3f 4f       	sbci	r19, 0xFF	; 255
    175a:	20 83       	st	Z, r18
    175c:	31 83       	std	Z+1, r19	; 0x01
    175e:	8c 93       	st	X, r24
    1760:	26 81       	ldd	r18, Z+6	; 0x06
    1762:	37 81       	ldd	r19, Z+7	; 0x07
    1764:	2f 5f       	subi	r18, 0xFF	; 255
    1766:	3f 4f       	sbci	r19, 0xFF	; 255
    1768:	26 83       	std	Z+6, r18	; 0x06
    176a:	37 83       	std	Z+7, r19	; 0x07
    176c:	10 c0       	rjmp	.+32     	; 0x178e <fputc+0x66>
    176e:	eb 01       	movw	r28, r22
    1770:	09 2f       	mov	r16, r25
    1772:	18 2f       	mov	r17, r24
    1774:	00 84       	ldd	r0, Z+8	; 0x08
    1776:	f1 85       	ldd	r31, Z+9	; 0x09
    1778:	e0 2d       	mov	r30, r0
    177a:	09 95       	icall
    177c:	89 2b       	or	r24, r25
    177e:	e1 f6       	brne	.-72     	; 0x1738 <fputc+0x10>
    1780:	8e 81       	ldd	r24, Y+6	; 0x06
    1782:	9f 81       	ldd	r25, Y+7	; 0x07
    1784:	01 96       	adiw	r24, 0x01	; 1
    1786:	8e 83       	std	Y+6, r24	; 0x06
    1788:	9f 83       	std	Y+7, r25	; 0x07
    178a:	81 2f       	mov	r24, r17
    178c:	90 2f       	mov	r25, r16
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	08 95       	ret

00001798 <__ultoa_invert>:
    1798:	fa 01       	movw	r30, r20
    179a:	aa 27       	eor	r26, r26
    179c:	28 30       	cpi	r18, 0x08	; 8
    179e:	51 f1       	breq	.+84     	; 0x17f4 <__ultoa_invert+0x5c>
    17a0:	20 31       	cpi	r18, 0x10	; 16
    17a2:	81 f1       	breq	.+96     	; 0x1804 <__ultoa_invert+0x6c>
    17a4:	e8 94       	clt
    17a6:	6f 93       	push	r22
    17a8:	6e 7f       	andi	r22, 0xFE	; 254
    17aa:	6e 5f       	subi	r22, 0xFE	; 254
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	8f 4f       	sbci	r24, 0xFF	; 255
    17b0:	9f 4f       	sbci	r25, 0xFF	; 255
    17b2:	af 4f       	sbci	r26, 0xFF	; 255
    17b4:	b1 e0       	ldi	r27, 0x01	; 1
    17b6:	3e d0       	rcall	.+124    	; 0x1834 <__ultoa_invert+0x9c>
    17b8:	b4 e0       	ldi	r27, 0x04	; 4
    17ba:	3c d0       	rcall	.+120    	; 0x1834 <__ultoa_invert+0x9c>
    17bc:	67 0f       	add	r22, r23
    17be:	78 1f       	adc	r23, r24
    17c0:	89 1f       	adc	r24, r25
    17c2:	9a 1f       	adc	r25, r26
    17c4:	a1 1d       	adc	r26, r1
    17c6:	68 0f       	add	r22, r24
    17c8:	79 1f       	adc	r23, r25
    17ca:	8a 1f       	adc	r24, r26
    17cc:	91 1d       	adc	r25, r1
    17ce:	a1 1d       	adc	r26, r1
    17d0:	6a 0f       	add	r22, r26
    17d2:	71 1d       	adc	r23, r1
    17d4:	81 1d       	adc	r24, r1
    17d6:	91 1d       	adc	r25, r1
    17d8:	a1 1d       	adc	r26, r1
    17da:	20 d0       	rcall	.+64     	; 0x181c <__ultoa_invert+0x84>
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <__ultoa_invert+0x48>
    17de:	68 94       	set
    17e0:	3f 91       	pop	r19
    17e2:	2a e0       	ldi	r18, 0x0A	; 10
    17e4:	26 9f       	mul	r18, r22
    17e6:	11 24       	eor	r1, r1
    17e8:	30 19       	sub	r19, r0
    17ea:	30 5d       	subi	r19, 0xD0	; 208
    17ec:	31 93       	st	Z+, r19
    17ee:	de f6       	brtc	.-74     	; 0x17a6 <__ultoa_invert+0xe>
    17f0:	cf 01       	movw	r24, r30
    17f2:	08 95       	ret
    17f4:	46 2f       	mov	r20, r22
    17f6:	47 70       	andi	r20, 0x07	; 7
    17f8:	40 5d       	subi	r20, 0xD0	; 208
    17fa:	41 93       	st	Z+, r20
    17fc:	b3 e0       	ldi	r27, 0x03	; 3
    17fe:	0f d0       	rcall	.+30     	; 0x181e <__ultoa_invert+0x86>
    1800:	c9 f7       	brne	.-14     	; 0x17f4 <__ultoa_invert+0x5c>
    1802:	f6 cf       	rjmp	.-20     	; 0x17f0 <__ultoa_invert+0x58>
    1804:	46 2f       	mov	r20, r22
    1806:	4f 70       	andi	r20, 0x0F	; 15
    1808:	40 5d       	subi	r20, 0xD0	; 208
    180a:	4a 33       	cpi	r20, 0x3A	; 58
    180c:	18 f0       	brcs	.+6      	; 0x1814 <__ultoa_invert+0x7c>
    180e:	49 5d       	subi	r20, 0xD9	; 217
    1810:	31 fd       	sbrc	r19, 1
    1812:	40 52       	subi	r20, 0x20	; 32
    1814:	41 93       	st	Z+, r20
    1816:	02 d0       	rcall	.+4      	; 0x181c <__ultoa_invert+0x84>
    1818:	a9 f7       	brne	.-22     	; 0x1804 <__ultoa_invert+0x6c>
    181a:	ea cf       	rjmp	.-44     	; 0x17f0 <__ultoa_invert+0x58>
    181c:	b4 e0       	ldi	r27, 0x04	; 4
    181e:	a6 95       	lsr	r26
    1820:	97 95       	ror	r25
    1822:	87 95       	ror	r24
    1824:	77 95       	ror	r23
    1826:	67 95       	ror	r22
    1828:	ba 95       	dec	r27
    182a:	c9 f7       	brne	.-14     	; 0x181e <__ultoa_invert+0x86>
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	61 05       	cpc	r22, r1
    1830:	71 05       	cpc	r23, r1
    1832:	08 95       	ret
    1834:	9b 01       	movw	r18, r22
    1836:	ac 01       	movw	r20, r24
    1838:	0a 2e       	mov	r0, r26
    183a:	06 94       	lsr	r0
    183c:	57 95       	ror	r21
    183e:	47 95       	ror	r20
    1840:	37 95       	ror	r19
    1842:	27 95       	ror	r18
    1844:	ba 95       	dec	r27
    1846:	c9 f7       	brne	.-14     	; 0x183a <__ultoa_invert+0xa2>
    1848:	62 0f       	add	r22, r18
    184a:	73 1f       	adc	r23, r19
    184c:	84 1f       	adc	r24, r20
    184e:	95 1f       	adc	r25, r21
    1850:	a0 1d       	adc	r26, r0
    1852:	08 95       	ret

00001854 <_exit>:
    1854:	f8 94       	cli

00001856 <__stop_program>:
    1856:	ff cf       	rjmp	.-2      	; 0x1856 <__stop_program>
